{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$();\n\nimport { useQueryClient } from \"react-query\";\nimport { gql } from \"graphql-request\";\nimport { useGqlQuery, useGqlMutation } from \"api/Api\"; // GQL API METHODS\n\nexport const useFetchQuestionsGql = projectId => {\n  _s();\n\n  const query = gql`\n    query {\n      project(id: \"${projectId}\") {\n        id\n        name\n        question {\n          description\n          pageOrderIndex\n          pageNumber\n          type\n          description\n          questionTypeConfig {\n            choiceQuestion {\n              isMultiSelect\n              isRandomized\n              hasOtherOption\n              otherOptionLabel\n              choice {\n                id\n                choiceText\n              }\n            }\n            scaleQuestion {\n              min\n              minDescription\n              max\n              maxDescription\n              step\n            }\n            textQuestion {\n              placeholder\n            }\n          }\n          questionText\n        }\n      }\n    }\n  `;\n  return useGqlQuery([\"projects\", projectId, \"questions\"], query, {});\n};\n\n_s(useFetchQuestionsGql, \"OIuQPBGUklVORIy//JVFJUY4r0c=\", false, function () {\n  return [useGqlQuery];\n});\n\nexport const useFetchQuestionGql = function (questionId) {\n  _s2();\n\n  let projectId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const query = gql`\n    query {\n      question(id: \"${questionId}\" ) {\n        id\n        name\n        type\n        description\n        instructions\n        otherOptionText\n        project_id\n        naOption\n        Choices {\n          id\n          choice_value\n        }\n        question_type_config\n      }\n    }`;\n  let options = {};\n  const queryClient = useQueryClient();\n\n  if (projectId) {\n    options = {\n      initialData: () => {\n        var _queryClient$getQuery;\n\n        return (_queryClient$getQuery = queryClient.getQueryData([\"projects\", projectId, \"questions\"])) === null || _queryClient$getQuery === void 0 ? void 0 : _queryClient$getQuery.find(d => d.id == questionId);\n      }\n    };\n  }\n\n  return useGqlQuery([\"questions\", questionId], query, [], options);\n};\n\n_s2(useFetchQuestionGql, \"IZLMNTFwMJ76KQ/MxOlEEoOyi3o=\", false, function () {\n  return [useQueryClient, useGqlQuery];\n});\n\nexport const useCreateQuestionGql = () => {\n  _s3();\n\n  const mutation = gql`\n    mutation CreateQuestion(\n      $data: QuestionInput!\n    ) {\n      createQuestion(\n        data: $data\n      ) {\n        questionText\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"questions\");\n    } // onSuccess: (data) => {\n    //   console.log(\"Heck Yeah!\");\n    //   console.log(data);\n    // },\n\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s3(useCreateQuestionGql, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});\n\nexport const useDeleteQuestion = () => {\n  _s4();\n\n  const mutation = gql`\n    mutation RemoveQuestion(\n      $id: ID!\n    ) {\n      removeQuestion(\n        id: $id\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"questions\");\n    } // onSuccess: (data) => {\n    //   console.log(\"Heck Yeah!\");\n    //   console.log(data);\n    // },\n\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s4(useDeleteQuestion, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});\n\nexport const useUpdateQuestionName = () => {\n  _s5();\n\n  const mutation = gql`\n    mutation UpdateQuestion(\n      $id: ID!\n      $name: String\n    ) {\n      updateQuestion(\n        id: $id\n        name: $name\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"questions\");\n    } // onSuccess: (data) => {\n    //   console.log(\"Heck Yeah!\");\n    //   console.log(data);\n    // },\n\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s5(useUpdateQuestionName, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});\n\nexport const useUpdateQuestionInstructions = () => {\n  _s6();\n\n  const mutation = gql`\n    mutation UpdateQuestion(\n      $id: ID!\n      $instructions: String\n    ) {\n      updateQuestion(\n        id: $id\n        instructions: $instructions\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"questions\");\n    } // onSuccess: (data) => {\n    //   console.log(\"Heck Yeah!\");\n    //   console.log(data);\n    // },\n\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s6(useUpdateQuestionInstructions, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});\n\nexport const useUpdateQuestionConfig = () => {\n  _s7();\n\n  const mutation = gql`\n    mutation UpdateQuestion(\n      $id: ID!\n      $question_type_config: JSON\n    ) {\n      updateQuestion(\n        id: $id\n        question_type_config: $question_type_config\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"questions\");\n    } // onSuccess: (data) => {\n    //   console.log(\"Heck Yeah!\");\n    //   console.log(data);\n    // },\n\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s7(useUpdateQuestionConfig, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});\n\nexport const useUpdateQuestionNAOption = () => {\n  _s8();\n\n  const mutation = gql`\n    mutation UpdateQuestion(\n      $id: ID!\n      $naOption: Boolean\n    ) {\n      updateQuestion(\n        id: $id\n        naOption: $naOption\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"questions\");\n    } // onSuccess: (data) => {\n    //   console.log(\"Heck Yeah!\");\n    //   console.log(data);\n    // },\n\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s8(useUpdateQuestionNAOption, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});\n\nexport const useUpdateQuestionType = () => {\n  _s9();\n\n  const mutation = gql`\n    mutation UpdateQuestion(\n      $id: ID!\n      $type: String\n      $question_type_config: JSON\n    ) {\n      updateQuestion(\n        id: $id\n        type: $type\n        question_type_config: $question_type_config\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"questions\");\n    } // onSuccess: (data) => {\n    //   console.log(\"Heck Yeah!\");\n    //   console.log(data);\n    // },\n\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s9(useUpdateQuestionType, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});\n\nexport const useCreatePage = () => {\n  _s10();\n\n  const mutation = gql`\n    mutation CreatePage(\n      $project_id: ID!\n      $page_num: Int!\n    ) {\n      createPage(\n        project_id: $project_id\n        page_num: $page_num\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"projects\"]);\n    }\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s10(useCreatePage, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});\n\nexport const useUpdateQuestionGql = () => {\n  _s11();\n\n  const mutation = gql`\n    mutation UpdateQuestion($values: QuestionInput!) {\n      updateQuestion(values: $values) {\n        title\n        instructions\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      console.log(err);\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"questions\");\n    }\n  };\n  return useGqlMutation(mutation, [], options);\n}; // REST API METHODS\n// const uri = \"/questions\";\n// export const useFetchQuestions = (projectId) => {\n//   return useQuery(\n//     [\"projects\", projectId, \"questions\"], // Cache key\n//     () =>\n//       apiClient.get(`${uri}?projectId=${projectId}`).then((res) => res.data), // Query function\n//     {\n//       // Query config\n//     }\n//   );\n// };\n// export const useFetchQuestion = (questionId) => {\n//   return useQuery(\n//     [\"questions\", questionId],\n//     () => apiClient.get(`${uri}/${questionId}`).then((res) => res.data),\n//     {}\n//   );\n// };\n// export const useCreateQuestion = (projectId) => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) => apiClient.post(`${uri}`, values).then((res) => res.data),\n//     {\n//       onMutate: (values) => {\n//         console.log(\"creating question\");\n//         console.log(values);\n//       },\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSettled: () => {\n//         queryClient.invalidateQueries([\"projects\", projectId, \"questions\"]);\n//       },\n//     }\n//   );\n// };\n// export const useUpdateQuestion = (projectId) => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) =>\n//       apiClient.patch(`${uri}/${values.id}`, values).then((res) => res.data),\n//     {\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSuccess: () => {\n//         queryClient.invalidateQueries([\"projects\", projectId, \"questions\"]);\n//       },\n//     }\n//   );\n// };\n// export const useDeleteQuestion = (projectId) => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (questionId) =>\n//       apiClient.delete(`${uri}/${questionId}`).then((res) => res.data),\n//     {\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSuccess: () => {\n//         queryClient.invalidateQueries([\"projects\", projectId, \"questions\"]);\n//       },\n//     }\n//   );\n// };\n// export const useFetchQuestionChoices = (projectId, questionId) => {\n//   return useQuery(\n//     [\"projects\", projectId, \"questions\", questionId, \"choices\"],\n//     () =>\n//       apiClient\n//         .get(`/questions/${questionId}?_embed=choices&projectId=${projectId}`)\n//         .then((res) => res.data.choices),\n//     {}\n//   );\n// };\n// export const useUpdateQuestionChoices = (projectId, questionId) => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) =>\n//       apiClient.patch(`/choices/${values.id}`, values).then((res) => res.data),\n//     {\n//       onMutate: (values) => {\n//         // queryClient.setQueriesData(\n//         //   [\"projects\", projectId, \"questions\", questionId, \"choices\"],\n//         // );\n//         console.log(values, questionId);\n//       },\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSuccess: () => {\n//         queryClient.invalidateQueries([\"projects\", projectId, \"questions\"]);\n//       },\n//     }\n//   );\n// };\n// export const useCreateQuestionChoice = (projectId, questionId) => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) => apiClient.post(`/choices`, values).then((res) => res.data),\n//     {\n//       onMutate: (values) => {\n//         console.log(\"creating question\", values);\n//       },\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSettled: () => {\n//         queryClient.invalidateQueries([\n//           \"projects\",\n//           projectId,\n//           \"questions\",\n//           questionId,\n//           \"choices\",\n//         ]);\n//       },\n//     }\n//   );\n// };\n// export const useDeleteQuestionChoice = (projectId, questionId) => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) =>\n//       apiClient.delete(`/choices/${values.id}`).then((res) => res.data),\n//     {\n//       onMutate: () => {\n//         console.log(\"deleting question\");\n//       },\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSettled: () => {\n//         queryClient.invalidateQueries([\n//           \"projects\",\n//           projectId,\n//           \"questions\",\n//           questionId,\n//           \"choices\",\n//         ]);\n//       },\n//     }\n//   );\n// };\n\n_s11(useUpdateQuestionGql, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});","map":{"version":3,"names":["useQueryClient","gql","useGqlQuery","useGqlMutation","useFetchQuestionsGql","projectId","query","useFetchQuestionGql","questionId","options","queryClient","initialData","getQueryData","find","d","id","useCreateQuestionGql","mutation","onError","err","_project","rollback","onSettled","invalidateQueries","useDeleteQuestion","useUpdateQuestionName","useUpdateQuestionInstructions","useUpdateQuestionConfig","useUpdateQuestionNAOption","useUpdateQuestionType","useCreatePage","onSuccess","useUpdateQuestionGql","console","log"],"sources":["/Users/natehanson/Desktop/reactiondata-frontend/src/api/resources/projects/questions.js"],"sourcesContent":["\n\nimport { useQueryClient } from \"react-query\";\nimport { gql } from \"graphql-request\";\n\nimport { useGqlQuery, useGqlMutation } from \"api/Api\";\n\n// GQL API METHODS\nexport const useFetchQuestionsGql = (projectId) => {\n  const query = gql`\n    query {\n      project(id: \"${projectId}\") {\n        id\n        name\n        question {\n          description\n          pageOrderIndex\n          pageNumber\n          type\n          description\n          questionTypeConfig {\n            choiceQuestion {\n              isMultiSelect\n              isRandomized\n              hasOtherOption\n              otherOptionLabel\n              choice {\n                id\n                choiceText\n              }\n            }\n            scaleQuestion {\n              min\n              minDescription\n              max\n              maxDescription\n              step\n            }\n            textQuestion {\n              placeholder\n            }\n          }\n          questionText\n        }\n      }\n    }\n  `;\n\n  return useGqlQuery([\"projects\", projectId, \"questions\"], query, {});\n};\n\nexport const useFetchQuestionGql = (questionId, projectId = null) => {\n  const query = gql`\n    query {\n      question(id: \"${questionId}\" ) {\n        id\n        name\n        type\n        description\n        instructions\n        otherOptionText\n        project_id\n        naOption\n        Choices {\n          id\n          choice_value\n        }\n        question_type_config\n      }\n    }`;\n\n  let options = {};\n  const queryClient = useQueryClient();\n  if (projectId) {\n    options = {\n      initialData: () => {\n        return queryClient\n          .getQueryData([\"projects\", projectId, \"questions\"])\n          ?.find((d) => d.id == questionId);\n      },\n    };\n  }\n\n  return useGqlQuery([\"questions\", questionId], query, [], options);\n};\n\nexport const useCreateQuestionGql = () => {\n  const mutation = gql`\n    mutation CreateQuestion(\n      $data: QuestionInput!\n    ) {\n      createQuestion(\n        data: $data\n      ) {\n        questionText\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"questions\");\n    },\n    // onSuccess: (data) => {\n    //   console.log(\"Heck Yeah!\");\n    //   console.log(data);\n    // },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\nexport const useDeleteQuestion = () => {\n  const mutation = gql`\n    mutation RemoveQuestion(\n      $id: ID!\n    ) {\n      removeQuestion(\n        id: $id\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"questions\");\n    },\n    // onSuccess: (data) => {\n    //   console.log(\"Heck Yeah!\");\n    //   console.log(data);\n    // },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\nexport const useUpdateQuestionName = () => {\n  const mutation = gql`\n    mutation UpdateQuestion(\n      $id: ID!\n      $name: String\n    ) {\n      updateQuestion(\n        id: $id\n        name: $name\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"questions\");\n    },\n    // onSuccess: (data) => {\n    //   console.log(\"Heck Yeah!\");\n    //   console.log(data);\n    // },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\nexport const useUpdateQuestionInstructions = () => {\n  const mutation = gql`\n    mutation UpdateQuestion(\n      $id: ID!\n      $instructions: String\n    ) {\n      updateQuestion(\n        id: $id\n        instructions: $instructions\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"questions\");\n    },\n    // onSuccess: (data) => {\n    //   console.log(\"Heck Yeah!\");\n    //   console.log(data);\n    // },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\nexport const useUpdateQuestionConfig = () => {\n  const mutation = gql`\n    mutation UpdateQuestion(\n      $id: ID!\n      $question_type_config: JSON\n    ) {\n      updateQuestion(\n        id: $id\n        question_type_config: $question_type_config\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"questions\");\n    },\n    // onSuccess: (data) => {\n    //   console.log(\"Heck Yeah!\");\n    //   console.log(data);\n    // },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\nexport const useUpdateQuestionNAOption = () => {\n  const mutation = gql`\n    mutation UpdateQuestion(\n      $id: ID!\n      $naOption: Boolean\n    ) {\n      updateQuestion(\n        id: $id\n        naOption: $naOption\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"questions\");\n    },\n    // onSuccess: (data) => {\n    //   console.log(\"Heck Yeah!\");\n    //   console.log(data);\n    // },\n  };\n\n  return useGqlMutation(mutation, options);\n};\nexport const useUpdateQuestionType = () => {\n  const mutation = gql`\n    mutation UpdateQuestion(\n      $id: ID!\n      $type: String\n      $question_type_config: JSON\n    ) {\n      updateQuestion(\n        id: $id\n        type: $type\n        question_type_config: $question_type_config\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"questions\");\n    },\n    // onSuccess: (data) => {\n    //   console.log(\"Heck Yeah!\");\n    //   console.log(data);\n    // },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\n\nexport const useCreatePage = () => {\n  const mutation = gql`\n    mutation CreatePage(\n      $project_id: ID!\n      $page_num: Int!\n    ) {\n      createPage(\n        project_id: $project_id\n        page_num: $page_num\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"projects\"]);\n    },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\nexport const useUpdateQuestionGql = () => {\n  const mutation = gql`\n    mutation UpdateQuestion($values: QuestionInput!) {\n      updateQuestion(values: $values) {\n        title\n        instructions\n      }\n    }\n  `;\n\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      console.log(err);\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"questions\");\n    },\n  };\n\n  return useGqlMutation(mutation, [], options);\n};\n\n\n\n// REST API METHODS\n// const uri = \"/questions\";\n\n// export const useFetchQuestions = (projectId) => {\n//   return useQuery(\n//     [\"projects\", projectId, \"questions\"], // Cache key\n//     () =>\n//       apiClient.get(`${uri}?projectId=${projectId}`).then((res) => res.data), // Query function\n//     {\n//       // Query config\n//     }\n//   );\n// };\n\n// export const useFetchQuestion = (questionId) => {\n//   return useQuery(\n//     [\"questions\", questionId],\n//     () => apiClient.get(`${uri}/${questionId}`).then((res) => res.data),\n//     {}\n//   );\n// };\n\n// export const useCreateQuestion = (projectId) => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) => apiClient.post(`${uri}`, values).then((res) => res.data),\n//     {\n//       onMutate: (values) => {\n//         console.log(\"creating question\");\n//         console.log(values);\n//       },\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSettled: () => {\n//         queryClient.invalidateQueries([\"projects\", projectId, \"questions\"]);\n//       },\n//     }\n//   );\n// };\n\n// export const useUpdateQuestion = (projectId) => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) =>\n//       apiClient.patch(`${uri}/${values.id}`, values).then((res) => res.data),\n//     {\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSuccess: () => {\n//         queryClient.invalidateQueries([\"projects\", projectId, \"questions\"]);\n//       },\n//     }\n//   );\n// };\n\n// export const useDeleteQuestion = (projectId) => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (questionId) =>\n//       apiClient.delete(`${uri}/${questionId}`).then((res) => res.data),\n//     {\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSuccess: () => {\n//         queryClient.invalidateQueries([\"projects\", projectId, \"questions\"]);\n//       },\n//     }\n//   );\n// };\n\n// export const useFetchQuestionChoices = (projectId, questionId) => {\n//   return useQuery(\n//     [\"projects\", projectId, \"questions\", questionId, \"choices\"],\n//     () =>\n//       apiClient\n//         .get(`/questions/${questionId}?_embed=choices&projectId=${projectId}`)\n//         .then((res) => res.data.choices),\n//     {}\n//   );\n// };\n\n// export const useUpdateQuestionChoices = (projectId, questionId) => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) =>\n//       apiClient.patch(`/choices/${values.id}`, values).then((res) => res.data),\n//     {\n//       onMutate: (values) => {\n//         // queryClient.setQueriesData(\n//         //   [\"projects\", projectId, \"questions\", questionId, \"choices\"],\n\n//         // );\n//         console.log(values, questionId);\n//       },\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSuccess: () => {\n//         queryClient.invalidateQueries([\"projects\", projectId, \"questions\"]);\n//       },\n//     }\n//   );\n// };\n\n// export const useCreateQuestionChoice = (projectId, questionId) => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) => apiClient.post(`/choices`, values).then((res) => res.data),\n//     {\n//       onMutate: (values) => {\n//         console.log(\"creating question\", values);\n//       },\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSettled: () => {\n//         queryClient.invalidateQueries([\n//           \"projects\",\n//           projectId,\n//           \"questions\",\n//           questionId,\n//           \"choices\",\n//         ]);\n//       },\n//     }\n//   );\n// };\n\n// export const useDeleteQuestionChoice = (projectId, questionId) => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) =>\n//       apiClient.delete(`/choices/${values.id}`).then((res) => res.data),\n//     {\n//       onMutate: () => {\n//         console.log(\"deleting question\");\n//       },\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSettled: () => {\n//         queryClient.invalidateQueries([\n//           \"projects\",\n//           projectId,\n//           \"questions\",\n//           questionId,\n//           \"choices\",\n//         ]);\n//       },\n//     }\n//   );\n// };\n\n\n"],"mappings":";;;;;;;;;;;;AAEA,SAASA,cAAT,QAA+B,aAA/B;AACA,SAASC,GAAT,QAAoB,iBAApB;AAEA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,SAA5C,C,CAEA;;AACA,OAAO,MAAMC,oBAAoB,GAAIC,SAAD,IAAe;EAAA;;EACjD,MAAMC,KAAK,GAAGL,GAAI;AACpB;AACA,qBAAqBI,SAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GArCE;EAuCA,OAAOH,WAAW,CAAC,CAAC,UAAD,EAAaG,SAAb,EAAwB,WAAxB,CAAD,EAAuCC,KAAvC,EAA8C,EAA9C,CAAlB;AACD,CAzCM;;GAAMF,oB;UAwCJF,W;;;AAGT,OAAO,MAAMK,mBAAmB,GAAG,UAACC,UAAD,EAAkC;EAAA;;EAAA,IAArBH,SAAqB,uEAAT,IAAS;EACnE,MAAMC,KAAK,GAAGL,GAAI;AACpB;AACA,sBAAsBO,UAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAjBE;EAmBA,IAAIC,OAAO,GAAG,EAAd;EACA,MAAMC,WAAW,GAAGV,cAAc,EAAlC;;EACA,IAAIK,SAAJ,EAAe;IACbI,OAAO,GAAG;MACRE,WAAW,EAAE,MAAM;QAAA;;QACjB,gCAAOD,WAAW,CACfE,YADI,CACS,CAAC,UAAD,EAAaP,SAAb,EAAwB,WAAxB,CADT,CAAP,0DAAO,sBAEHQ,IAFG,CAEGC,CAAD,IAAOA,CAAC,CAACC,EAAF,IAAQP,UAFjB,CAAP;MAGD;IALO,CAAV;EAOD;;EAED,OAAON,WAAW,CAAC,CAAC,WAAD,EAAcM,UAAd,CAAD,EAA4BF,KAA5B,EAAmC,EAAnC,EAAuCG,OAAvC,CAAlB;AACD,CAjCM;;IAAMF,mB;UAqBSP,c,EAWbE,W;;;AAGT,OAAO,MAAMc,oBAAoB,GAAG,MAAM;EAAA;;EACxC,MAAMC,QAAQ,GAAGhB,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAVE;EAWA,MAAMS,WAAW,GAAGV,cAAc,EAAlC;EACA,MAAMS,OAAO,GAAG;IACdS,OAAO,EAAE,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,KAA6B;MACpC,IAAIA,QAAJ,EAAcA,QAAQ;IACvB,CAHa;IAIdC,SAAS,EAAE,MAAM;MACfZ,WAAW,CAACa,iBAAZ,CAA8B,WAA9B;IACD,CANa,CAOd;IACA;IACA;IACA;;EAVc,CAAhB;EAaA,OAAOpB,cAAc,CAACc,QAAD,EAAWR,OAAX,CAArB;AACD,CA3BM;;IAAMO,oB;UAYShB,c,EAcbG,c;;;AAGT,OAAO,MAAMqB,iBAAiB,GAAG,MAAM;EAAA;;EACrC,MAAMP,QAAQ,GAAGhB,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAVE;EAWA,MAAMS,WAAW,GAAGV,cAAc,EAAlC;EACA,MAAMS,OAAO,GAAG;IACdS,OAAO,EAAE,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,KAA6B;MACpC,IAAIA,QAAJ,EAAcA,QAAQ;IACvB,CAHa;IAIdC,SAAS,EAAE,MAAM;MACfZ,WAAW,CAACa,iBAAZ,CAA8B,WAA9B;IACD,CANa,CAOd;IACA;IACA;IACA;;EAVc,CAAhB;EAaA,OAAOpB,cAAc,CAACc,QAAD,EAAWR,OAAX,CAArB;AACD,CA3BM;;IAAMe,iB;UAYSxB,c,EAcbG,c;;;AAGT,OAAO,MAAMsB,qBAAqB,GAAG,MAAM;EAAA;;EACzC,MAAMR,QAAQ,GAAGhB,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAZE;EAaA,MAAMS,WAAW,GAAGV,cAAc,EAAlC;EACA,MAAMS,OAAO,GAAG;IACdS,OAAO,EAAE,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,KAA6B;MACpC,IAAIA,QAAJ,EAAcA,QAAQ;IACvB,CAHa;IAIdC,SAAS,EAAE,MAAM;MACfZ,WAAW,CAACa,iBAAZ,CAA8B,WAA9B;IACD,CANa,CAOd;IACA;IACA;IACA;;EAVc,CAAhB;EAaA,OAAOpB,cAAc,CAACc,QAAD,EAAWR,OAAX,CAArB;AACD,CA7BM;;IAAMgB,qB;UAcSzB,c,EAcbG,c;;;AAGT,OAAO,MAAMuB,6BAA6B,GAAG,MAAM;EAAA;;EACjD,MAAMT,QAAQ,GAAGhB,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAZE;EAaA,MAAMS,WAAW,GAAGV,cAAc,EAAlC;EACA,MAAMS,OAAO,GAAG;IACdS,OAAO,EAAE,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,KAA6B;MACpC,IAAIA,QAAJ,EAAcA,QAAQ;IACvB,CAHa;IAIdC,SAAS,EAAE,MAAM;MACfZ,WAAW,CAACa,iBAAZ,CAA8B,WAA9B;IACD,CANa,CAOd;IACA;IACA;IACA;;EAVc,CAAhB;EAaA,OAAOpB,cAAc,CAACc,QAAD,EAAWR,OAAX,CAArB;AACD,CA7BM;;IAAMiB,6B;UAcS1B,c,EAcbG,c;;;AAGT,OAAO,MAAMwB,uBAAuB,GAAG,MAAM;EAAA;;EAC3C,MAAMV,QAAQ,GAAGhB,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAZE;EAaA,MAAMS,WAAW,GAAGV,cAAc,EAAlC;EACA,MAAMS,OAAO,GAAG;IACdS,OAAO,EAAE,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,KAA6B;MACpC,IAAIA,QAAJ,EAAcA,QAAQ;IACvB,CAHa;IAIdC,SAAS,EAAE,MAAM;MACfZ,WAAW,CAACa,iBAAZ,CAA8B,WAA9B;IACD,CANa,CAOd;IACA;IACA;IACA;;EAVc,CAAhB;EAaA,OAAOpB,cAAc,CAACc,QAAD,EAAWR,OAAX,CAArB;AACD,CA7BM;;IAAMkB,uB;UAcS3B,c,EAcbG,c;;;AAGT,OAAO,MAAMyB,yBAAyB,GAAG,MAAM;EAAA;;EAC7C,MAAMX,QAAQ,GAAGhB,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAZE;EAaA,MAAMS,WAAW,GAAGV,cAAc,EAAlC;EACA,MAAMS,OAAO,GAAG;IACdS,OAAO,EAAE,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,KAA6B;MACpC,IAAIA,QAAJ,EAAcA,QAAQ;IACvB,CAHa;IAIdC,SAAS,EAAE,MAAM;MACfZ,WAAW,CAACa,iBAAZ,CAA8B,WAA9B;IACD,CANa,CAOd;IACA;IACA;IACA;;EAVc,CAAhB;EAaA,OAAOpB,cAAc,CAACc,QAAD,EAAWR,OAAX,CAArB;AACD,CA7BM;;IAAMmB,yB;UAcS5B,c,EAcbG,c;;;AAET,OAAO,MAAM0B,qBAAqB,GAAG,MAAM;EAAA;;EACzC,MAAMZ,QAAQ,GAAGhB,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAdE;EAeA,MAAMS,WAAW,GAAGV,cAAc,EAAlC;EACA,MAAMS,OAAO,GAAG;IACdS,OAAO,EAAE,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,KAA6B;MACpC,IAAIA,QAAJ,EAAcA,QAAQ;IACvB,CAHa;IAIdC,SAAS,EAAE,MAAM;MACfZ,WAAW,CAACa,iBAAZ,CAA8B,WAA9B;IACD,CANa,CAOd;IACA;IACA;IACA;;EAVc,CAAhB;EAaA,OAAOpB,cAAc,CAACc,QAAD,EAAWR,OAAX,CAArB;AACD,CA/BM;;IAAMoB,qB;UAgBS7B,c,EAcbG,c;;;AAIT,OAAO,MAAM2B,aAAa,GAAG,MAAM;EAAA;;EACjC,MAAMb,QAAQ,GAAGhB,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAZE;EAaA,MAAMS,WAAW,GAAGV,cAAc,EAAlC;EACA,MAAMS,OAAO,GAAG;IACdS,OAAO,EAAE,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,KAA6B;MACpC,IAAIA,QAAJ,EAAcA,QAAQ;IACvB,CAHa;IAIdU,SAAS,EAAE,MAAM;MACfrB,WAAW,CAACa,iBAAZ,CAA8B,CAAC,UAAD,CAA9B;IACD;EANa,CAAhB;EASA,OAAOpB,cAAc,CAACc,QAAD,EAAWR,OAAX,CAArB;AACD,CAzBM;;KAAMqB,a;UAcS9B,c,EAUbG,c;;;AAGT,OAAO,MAAM6B,oBAAoB,GAAG,MAAM;EAAA;;EACxC,MAAMf,QAAQ,GAAGhB,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,GAPE;EASA,MAAMS,WAAW,GAAGV,cAAc,EAAlC;EACA,MAAMS,OAAO,GAAG;IACdS,OAAO,EAAE,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,KAA6B;MACpCY,OAAO,CAACC,GAAR,CAAYf,GAAZ;MACA,IAAIE,QAAJ,EAAcA,QAAQ;IACvB,CAJa;IAKdC,SAAS,EAAE,MAAM;MACfZ,WAAW,CAACa,iBAAZ,CAA8B,WAA9B;IACD;EAPa,CAAhB;EAUA,OAAOpB,cAAc,CAACc,QAAD,EAAW,EAAX,EAAeR,OAAf,CAArB;AACD,CAtBM,C,CA0BP;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;KA1LauB,oB;UAUShC,c,EAWbG,c"},"metadata":{},"sourceType":"module"}