{"ast":null,"code":"var _jsxFileName = \"/Users/natehanson/Desktop/reactiondata-frontend/src/components/ReactModal/ReactModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport Button from \"components/buttons/Button/Button\"; // import CloseIcon from \"../CloseIcon\";\n\nimport styles from \"./ReactModal.module.scss\";\n/**\n * A modal that is displayed on top of everything else in the page\n * @param {Function} modalStyle something\n * @param children anything inside the <ReactModal></ReactModal> will be displayed with the modal is shown/activated\n * @param {Boolean} show if this is true the modal will show\n * @param {Function} onClose a function that is called when the button is clicked. Button only shows if function is given as a parameter\n * @param {Function} onSave a function that is called when the button is clicked. Button only shows if function is given as a parameter\n * @param {String} backdropStyle something\n * @param {String} saveID something\n * @returns {React.ReactElement} a ReactModal\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Modal = _ref => {\n  _s();\n\n  let {\n    modalStyle,\n    children,\n    show,\n    onClose,\n    onSave,\n    backdropStyle\n  } = _ref;\n  const modalRef = useRef(null);\n  useEffect(() => {\n    if (show) {\n      var _modalRef$current;\n\n      (_modalRef$current = modalRef.current) === null || _modalRef$current === void 0 ? void 0 : _modalRef$current.classList.add(styles.visible);\n    } else {\n      var _modalRef$current2;\n\n      (_modalRef$current2 = modalRef.current) === null || _modalRef$current2 === void 0 ? void 0 : _modalRef$current2.classList.remove(styles.visible);\n    }\n  }, [show]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: modalRef,\n      style: backdropStyle,\n      className: `${styles.modal}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: modalStyle,\n        className: styles.modal__wrap,\n        children: [children, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.buttons,\n          children: [onClose && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buttonclose,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onClose,\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), onSave && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buttonsave,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onSave,\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Modal, \"iXNJws+mDn9J+ZcpHudMXHGV85c=\");\n\n_c = Modal;\nexport default Modal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["React","useEffect","useRef","Button","styles","Modal","modalStyle","children","show","onClose","onSave","backdropStyle","modalRef","current","classList","add","visible","remove","modal","modal__wrap","buttons","buttonclose","buttonsave"],"sources":["/Users/natehanson/Desktop/reactiondata-frontend/src/components/ReactModal/ReactModal.tsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\n\nimport Button from \"components/buttons/Button/Button\";\n\n// import CloseIcon from \"../CloseIcon\";\nimport styles from \"./ReactModal.module.scss\";\n\n/**\n * A modal that is displayed on top of everything else in the page\n * @param {Function} modalStyle something\n * @param children anything inside the <ReactModal></ReactModal> will be displayed with the modal is shown/activated\n * @param {Boolean} show if this is true the modal will show\n * @param {Function} onClose a function that is called when the button is clicked. Button only shows if function is given as a parameter\n * @param {Function} onSave a function that is called when the button is clicked. Button only shows if function is given as a parameter\n * @param {String} backdropStyle something\n * @param {String} saveID something\n * @returns {React.ReactElement} a ReactModal\n */\n\n\n interface Props {\n  modalStyle?: Object,\n  children: any,\n  show: boolean,\n  onClose?: Function | undefined,\n  onSave?: Function | undefined,\n  backdropStyle?: Object\n}\n\n\nconst Modal:React.FC<Props> = ({\n  modalStyle,\n  children,\n  show,\n  onClose,\n  onSave,\n  backdropStyle,\n}) => {\n  const modalRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (show) {\n      modalRef.current?.classList.add(styles.visible);\n    } else {\n      modalRef.current?.classList.remove(styles.visible);\n    }\n  }, [show]);\n  return (\n    <React.Fragment>\n      <div ref={modalRef} style={backdropStyle} className={`${styles.modal}`}>\n        <div style={modalStyle} className={styles.modal__wrap}>\n          {children}\n          <div className={styles.buttons}>\n            {onClose && (\n              <div className={styles.buttonclose}>\n                <Button onClick={onClose}>Close</Button>\n              </div>\n            )}\n            {onSave && (\n              <div className={styles.buttonsave}>\n                <Button onClick={onSave}>Save</Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Modal;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AAEA,OAAOC,MAAP,MAAmB,kCAAnB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAaA,MAAMC,KAAqB,GAAG,QAOxB;EAAA;;EAAA,IAPyB;IAC7BC,UAD6B;IAE7BC,QAF6B;IAG7BC,IAH6B;IAI7BC,OAJ6B;IAK7BC,MAL6B;IAM7BC;EAN6B,CAOzB;EACJ,MAAMC,QAAQ,GAAGV,MAAM,CAAmB,IAAnB,CAAvB;EAEAD,SAAS,CAAC,MAAM;IACd,IAAIO,IAAJ,EAAU;MAAA;;MACR,qBAAAI,QAAQ,CAACC,OAAT,wEAAkBC,SAAlB,CAA4BC,GAA5B,CAAgCX,MAAM,CAACY,OAAvC;IACD,CAFD,MAEO;MAAA;;MACL,sBAAAJ,QAAQ,CAACC,OAAT,0EAAkBC,SAAlB,CAA4BG,MAA5B,CAAmCb,MAAM,CAACY,OAA1C;IACD;EACF,CANQ,EAMN,CAACR,IAAD,CANM,CAAT;EAOA,oBACE,QAAC,KAAD,CAAO,QAAP;IAAA,uBACE;MAAK,GAAG,EAAEI,QAAV;MAAoB,KAAK,EAAED,aAA3B;MAA0C,SAAS,EAAG,GAAEP,MAAM,CAACc,KAAM,EAArE;MAAA,uBACE;QAAK,KAAK,EAAEZ,UAAZ;QAAwB,SAAS,EAAEF,MAAM,CAACe,WAA1C;QAAA,WACGZ,QADH,eAEE;UAAK,SAAS,EAAEH,MAAM,CAACgB,OAAvB;UAAA,WACGX,OAAO,iBACN;YAAK,SAAS,EAAEL,MAAM,CAACiB,WAAvB;YAAA,uBACE,QAAC,MAAD;cAAQ,OAAO,EAAEZ,OAAjB;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA,QAFJ,EAMGC,MAAM,iBACL;YAAK,SAAS,EAAEN,MAAM,CAACkB,UAAvB;YAAA,uBACE,QAAC,MAAD;cAAQ,OAAO,EAAEZ,MAAjB;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA,QAPJ;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD,CAtCD;;GAAML,K;;KAAAA,K;AAwCN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}