{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\n// External\nimport { useQueryClient } from \"react-query\";\nimport { gql } from \"graphql-request\"; // Internal\n\nimport { useGqlQuery, useGqlMutation } from \"api/Api\"; // GRAPHQL API\n\nexport const useFetchProjectsGql = () => {\n  _s();\n\n  const query = gql`\n    query {\n      surveys: projects {\n        id\n        name\n        description\n        status\n        type\n        responseCount\n        createdAt\n        updatedAt\n        supportedLocales\n      }\n    }\n  `;\n  return useGqlQuery([\"projects\"], query, {});\n};\n\n_s(useFetchProjectsGql, \"OIuQPBGUklVORIy//JVFJUY4r0c=\", false, function () {\n  return [useGqlQuery];\n});\n\nexport const useFetchProjectGql = id => {\n  _s2();\n\n  const query = gql`\n    query {\n      survey: project(id: \"${id}\") {\n        id\n        name\n        description\n        status\n        type\n        responseCount\n        createdAt\n        updatedAt\n        supportedLocales\n        scheduledToStartAt\n        scheduledToCloseAt\n        startedAt\n        closedAt\n        defaultLocale\n        isDeleted\n      }\n    }\n  `;\n  return useGqlQuery([\"projects\", id], query, {});\n};\n\n_s2(useFetchProjectGql, \"OIuQPBGUklVORIy//JVFJUY4r0c=\", false, function () {\n  return [useGqlQuery];\n});\n\nexport const useSearchProjectGql = (id, string) => {\n  _s3();\n\n  const query = gql`\n    query {\n      allProjects(filter: {organization_id: \"${id}\" q: \"${string}\"}) {\n        id\n        name\n        description\n        status\n        responses\n        owner\n        created_at\n        updated_at\n      }\n    }`;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"projects\");\n    }\n  };\n  return useGqlQuery([\"users\", id], query, options);\n}; // export const useCreateProjectGql = () => {\n//   const mutation = gql`\n//     mutation CreateProject(\n//       $name: String!\n//       $scheduledToStartAt: String!\n//       $scheduledToCloseAt: String!\n//       $defaultLocale: String!\n//       $status: String!\n//       $timezone: String!\n//       $type: String!\n//       $description: String!\n//       $responseCount: String!\n//       $organization_id: ID!\n//     ) {\n//       createProject(\n//         name: $name\n//         scheduledToStartAt: $scheduledToStartAt\n//         scheduledToCloseAt: $scheduledToCloseA\n//         defaultLocale: $defaultLocale\n//         status: $status\n//         timezone: $timezone\n//         type: $type\n//         description: $description\n//         responseCount: $responseCount\n//         organization_id: $organization_id\n//       ) {\n//         id\n//       }\n//     }\n//   `;\n//   const queryClient = useQueryClient();\n//   const options = {\n//     onError: (err, _project, rollback) => {\n//       if (rollback) rollback();\n//     },\n//     onSettled: () => {\n//       queryClient.invalidateQueries(\"projects\");\n//     },\n//   };\n//   return useGqlMutation(mutation, options);\n// };\n\n_s3(useSearchProjectGql, \"IZLMNTFwMJ76KQ/MxOlEEoOyi3o=\", false, function () {\n  return [useQueryClient, useGqlQuery];\n});\n\nexport const useCreateProjectGql = () => {\n  _s4();\n\n  const mutation = gql`\n    mutation CreateProject(\n      $data: {!\n    ) {\n      createProject(\n        data: $data\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"projects\");\n    }\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s4(useCreateProjectGql, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});\n\nexport const useUpdateNumPages = () => {\n  _s5();\n\n  const mutation = gql`\n    mutation UpdateProject(\n      $id: ID!\n      $num_pages: Int!\n    ) {\n      updateProject(\n        id: $id\n        num_pages: $num_pages\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"projects\"]);\n    }\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s5(useUpdateNumPages, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});\n\nexport const useDeleteProjectGql = () => {\n  _s6();\n\n  const mutation = gql`\n    mutation RemoveProject($id: ID!) {\n      removeProject(id: $id) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"projects\"]);\n    }\n  };\n  return useGqlMutation(mutation, options);\n}; // REST API\n// const uri = \"/projects\";\n// export const useFetchProjects = () => {\n//   return useQuery(\n//     \"projects\",\n//     () => apiClient.get(`${uri}`).then((res) => res.data),\n//     {}\n//   );\n// };\n// export const useFetchProject = (projectId) => {\n//   return useQuery(\n//     [\"projects\", projectId],\n//     () => apiClient.get(`${uri}/${projectId}`).then((res) => res.data),\n//     {}\n//   );\n// };\n// export const useCreateProject = () => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) => apiClient.post(`${uri}`, values).then((res) => res.data),\n//     {\n//       onMutate: (values) => {\n//         console.log(\"creating project\");\n//         console.log(values);\n//       },\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSettled: () => {\n//         queryClient.invalidateQueries(\"projects\");\n//       },\n//     }\n//   );\n// };\n// export const useUpdateProject = () => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) =>\n//       apiClient.patch(`${uri}/${values.id}`, values).then((res) => res.data),\n//     {\n//       onMutate: (values) => {\n//         // queryClient.setQueriesData([\"projects\", values.id], values);\n//         console.log(\"updating project\", values);\n//       },\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSuccess: () => {\n//         queryClient.invalidateQueries([\"projects\"]);\n//       },\n//     }\n//   );\n// };\n\n_s6(useDeleteProjectGql, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});","map":{"version":3,"names":["useQueryClient","gql","useGqlQuery","useGqlMutation","useFetchProjectsGql","query","useFetchProjectGql","id","useSearchProjectGql","string","queryClient","options","onError","err","_project","rollback","onSettled","invalidateQueries","useCreateProjectGql","mutation","useUpdateNumPages","onSuccess","useDeleteProjectGql"],"sources":["/Users/natehanson/Desktop/reactiondata-frontend/src/api/resources/projects/projects.js"],"sourcesContent":["// External\nimport { useQueryClient } from \"react-query\";\nimport { gql } from \"graphql-request\";\n\n// Internal\nimport { useGqlQuery, useGqlMutation } from \"api/Api\";\n\n// GRAPHQL API\n\nexport const useFetchProjectsGql = () => {\n  const query = gql`\n    query {\n      surveys: projects {\n        id\n        name\n        description\n        status\n        type\n        responseCount\n        createdAt\n        updatedAt\n        supportedLocales\n      }\n    }\n  `;\n\n  return useGqlQuery([\"projects\"], query, {});\n};\n\nexport const useFetchProjectGql = (id) => {\n  const query = gql`\n    query {\n      survey: project(id: \"${id}\") {\n        id\n        name\n        description\n        status\n        type\n        responseCount\n        createdAt\n        updatedAt\n        supportedLocales\n        scheduledToStartAt\n        scheduledToCloseAt\n        startedAt\n        closedAt\n        defaultLocale\n        isDeleted\n      }\n    }\n  `;\n\n  return useGqlQuery([\"projects\", id], query, {});\n};\n\nexport const useSearchProjectGql = (id, string) => {\n  const query = gql`\n    query {\n      allProjects(filter: {organization_id: \"${id}\" q: \"${string}\"}) {\n        id\n        name\n        description\n        status\n        responses\n        owner\n        created_at\n        updated_at\n      }\n    }`;\n\n    const queryClient = useQueryClient();\n    const options = {\n      onError: (err, _project, rollback) => {\n        if (rollback) rollback();\n      },\n      onSettled: () => {\n        queryClient.invalidateQueries(\"projects\");\n      },\n    };\n\n  return useGqlQuery([\"users\", id], query, options);\n};\n\n// export const useCreateProjectGql = () => {\n//   const mutation = gql`\n//     mutation CreateProject(\n//       $name: String!\n//       $scheduledToStartAt: String!\n//       $scheduledToCloseAt: String!\n//       $defaultLocale: String!\n//       $status: String!\n//       $timezone: String!\n//       $type: String!\n//       $description: String!\n//       $responseCount: String!\n//       $organization_id: ID!\n//     ) {\n//       createProject(\n//         name: $name\n//         scheduledToStartAt: $scheduledToStartAt\n//         scheduledToCloseAt: $scheduledToCloseA\n//         defaultLocale: $defaultLocale\n//         status: $status\n//         timezone: $timezone\n//         type: $type\n//         description: $description\n//         responseCount: $responseCount\n//         organization_id: $organization_id\n//       ) {\n//         id\n//       }\n//     }\n//   `;\n//   const queryClient = useQueryClient();\n//   const options = {\n//     onError: (err, _project, rollback) => {\n//       if (rollback) rollback();\n//     },\n//     onSettled: () => {\n//       queryClient.invalidateQueries(\"projects\");\n//     },\n//   };\n\n//   return useGqlMutation(mutation, options);\n// };\n\nexport const useCreateProjectGql = () => {\n  const mutation = gql`\n    mutation CreateProject(\n      $data: {!\n    ) {\n      createProject(\n        data: $data\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"projects\");\n    },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\nexport const useUpdateNumPages = () => {\n  const mutation = gql`\n    mutation UpdateProject(\n      $id: ID!\n      $num_pages: Int!\n    ) {\n      updateProject(\n        id: $id\n        num_pages: $num_pages\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"projects\"]);\n    },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\nexport const useDeleteProjectGql = () => {\n  const mutation = gql`\n    mutation RemoveProject($id: ID!) {\n      removeProject(id: $id) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"projects\"]);\n    },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\n// REST API\n// const uri = \"/projects\";\n\n// export const useFetchProjects = () => {\n//   return useQuery(\n//     \"projects\",\n//     () => apiClient.get(`${uri}`).then((res) => res.data),\n//     {}\n//   );\n// };\n\n// export const useFetchProject = (projectId) => {\n//   return useQuery(\n//     [\"projects\", projectId],\n//     () => apiClient.get(`${uri}/${projectId}`).then((res) => res.data),\n//     {}\n//   );\n// };\n\n// export const useCreateProject = () => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) => apiClient.post(`${uri}`, values).then((res) => res.data),\n//     {\n//       onMutate: (values) => {\n//         console.log(\"creating project\");\n//         console.log(values);\n//       },\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSettled: () => {\n//         queryClient.invalidateQueries(\"projects\");\n//       },\n//     }\n//   );\n// };\n\n// export const useUpdateProject = () => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) =>\n//       apiClient.patch(`${uri}/${values.id}`, values).then((res) => res.data),\n//     {\n//       onMutate: (values) => {\n//         // queryClient.setQueriesData([\"projects\", values.id], values);\n//         console.log(\"updating project\", values);\n//       },\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSuccess: () => {\n//         queryClient.invalidateQueries([\"projects\"]);\n//       },\n//     }\n//   );\n// };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}