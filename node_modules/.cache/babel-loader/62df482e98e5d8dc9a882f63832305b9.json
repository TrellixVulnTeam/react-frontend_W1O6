{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLWebSocketClient = exports.gql = exports.resolveRequestDocument = exports.batchRequests = exports.request = exports.rawRequest = exports.GraphQLClient = exports.ClientError = void 0;\n\nvar cross_fetch_1 = __importStar(require(\"cross-fetch\")),\n    CrossFetch = cross_fetch_1;\n\nvar parser_1 = require(\"graphql/language/parser\");\n\nvar printer_1 = require(\"graphql/language/printer\");\n\nvar createRequestBody_1 = __importDefault(require(\"./createRequestBody\"));\n\nvar defaultJsonSerializer_1 = require(\"./defaultJsonSerializer\");\n\nvar parseArgs_1 = require(\"./parseArgs\");\n\nvar types_1 = require(\"./types\");\n\nObject.defineProperty(exports, \"ClientError\", {\n  enumerable: true,\n  get: function () {\n    return types_1.ClientError;\n  }\n});\n/**\n * Convert the given headers configuration into a plain object.\n */\n\nvar resolveHeaders = function (headers) {\n  var oHeaders = {};\n\n  if (headers) {\n    if (typeof Headers !== 'undefined' && headers instanceof Headers || headers instanceof CrossFetch.Headers) {\n      oHeaders = HeadersInstanceToPlainObject(headers);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function (_a) {\n        var name = _a[0],\n            value = _a[1];\n        oHeaders[name] = value;\n      });\n    } else {\n      oHeaders = headers;\n    }\n  }\n\n  return oHeaders;\n};\n/**\n * Clean a GraphQL document to send it via a GET query\n *\n * @param {string} str GraphQL query\n * @returns {string} Cleaned query\n */\n\n\nvar queryCleanner = function (str) {\n  return str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ' ').trim();\n};\n/**\n * Create query string for GraphQL request\n *\n * @param {object} param0 -\n *\n * @param {string|string[]} param0.query the GraphQL document or array of document if it's a batch request\n * @param {string|undefined} param0.operationName the GraphQL operation name\n * @param {any|any[]} param0.variables the GraphQL variables to use\n */\n\n\nvar buildGetQueryParams = function (_a) {\n  var query = _a.query,\n      variables = _a.variables,\n      operationName = _a.operationName,\n      jsonSerializer = _a.jsonSerializer;\n\n  if (!Array.isArray(query)) {\n    var search = [\"query=\" + encodeURIComponent(queryCleanner(query))];\n\n    if (variables) {\n      search.push(\"variables=\" + encodeURIComponent(jsonSerializer.stringify(variables)));\n    }\n\n    if (operationName) {\n      search.push(\"operationName=\" + encodeURIComponent(operationName));\n    }\n\n    return search.join('&');\n  }\n\n  if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n    throw new Error('Cannot create query with given variable type, array expected');\n  } // Batch support\n\n\n  var payload = query.reduce(function (accu, currentQuery, index) {\n    accu.push({\n      query: queryCleanner(currentQuery),\n      variables: variables ? jsonSerializer.stringify(variables[index]) : undefined\n    });\n    return accu;\n  }, []);\n  return \"query=\" + encodeURIComponent(jsonSerializer.stringify(payload));\n};\n/**\n * Fetch data using POST method\n */\n\n\nvar post = function (_a) {\n  var url = _a.url,\n      query = _a.query,\n      variables = _a.variables,\n      operationName = _a.operationName,\n      headers = _a.headers,\n      fetch = _a.fetch,\n      fetchOptions = _a.fetchOptions;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var body;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          body = createRequestBody_1.default(query, variables, operationName, fetchOptions.jsonSerializer);\n          return [4\n          /*yield*/\n          , fetch(url, __assign({\n            method: 'POST',\n            headers: __assign(__assign({}, typeof body === 'string' ? {\n              'Content-Type': 'application/json'\n            } : {}), headers),\n            body: body\n          }, fetchOptions))];\n\n        case 1:\n          return [2\n          /*return*/\n          , _b.sent()];\n      }\n    });\n  });\n};\n/**\n * Fetch data using GET method\n */\n\n\nvar get = function (_a) {\n  var url = _a.url,\n      query = _a.query,\n      variables = _a.variables,\n      operationName = _a.operationName,\n      headers = _a.headers,\n      fetch = _a.fetch,\n      fetchOptions = _a.fetchOptions;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var queryParams;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          queryParams = buildGetQueryParams({\n            query: query,\n            variables: variables,\n            operationName: operationName,\n            jsonSerializer: fetchOptions.jsonSerializer\n          });\n          return [4\n          /*yield*/\n          , fetch(url + \"?\" + queryParams, __assign({\n            method: 'GET',\n            headers: headers\n          }, fetchOptions))];\n\n        case 1:\n          return [2\n          /*return*/\n          , _b.sent()];\n      }\n    });\n  });\n};\n/**\n * GraphQL Client.\n */\n\n\nvar GraphQLClient =\n/** @class */\nfunction () {\n  function GraphQLClient(url, options) {\n    this.url = url;\n    this.options = options || {};\n  }\n\n  GraphQLClient.prototype.rawRequest = function (queryOrOptions, variables, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n      var rawRequestOptions, _a, headers, _b, fetch, _c, method, fetchOptions, url, operationName;\n\n      return __generator(this, function (_d) {\n        rawRequestOptions = parseArgs_1.parseRawRequestArgs(queryOrOptions, variables, requestHeaders);\n        _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n        url = this.url;\n\n        if (rawRequestOptions.signal !== undefined) {\n          fetchOptions.signal = rawRequestOptions.signal;\n        }\n\n        operationName = resolveRequestDocument(rawRequestOptions.query).operationName;\n        return [2\n        /*return*/\n        , makeRequest({\n          url: url,\n          query: rawRequestOptions.query,\n          variables: rawRequestOptions.variables,\n          headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(rawRequestOptions.requestHeaders)),\n          operationName: operationName,\n          fetch: fetch,\n          method: method,\n          fetchOptions: fetchOptions\n        })];\n      });\n    });\n  };\n\n  GraphQLClient.prototype.request = function (documentOrOptions, variables, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestOptions, _a, headers, _b, fetch, _c, method, fetchOptions, url, _d, query, operationName, data;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            requestOptions = parseArgs_1.parseRequestArgs(documentOrOptions, variables, requestHeaders);\n            _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n            url = this.url;\n\n            if (requestOptions.signal !== undefined) {\n              fetchOptions.signal = requestOptions.signal;\n            }\n\n            _d = resolveRequestDocument(requestOptions.document), query = _d.query, operationName = _d.operationName;\n            return [4\n            /*yield*/\n            , makeRequest({\n              url: url,\n              query: query,\n              variables: requestOptions.variables,\n              headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(requestOptions.requestHeaders)),\n              operationName: operationName,\n              fetch: fetch,\n              method: method,\n              fetchOptions: fetchOptions\n            })];\n\n          case 1:\n            data = _e.sent().data;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n\n  GraphQLClient.prototype.batchRequests = function (documentsOrOptions, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n      var batchRequestOptions, _a, headers, _b, fetch, _c, method, fetchOptions, url, queries, variables, data;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            batchRequestOptions = parseArgs_1.parseBatchRequestArgs(documentsOrOptions, requestHeaders);\n            _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n            url = this.url;\n\n            if (batchRequestOptions.signal !== undefined) {\n              fetchOptions.signal = batchRequestOptions.signal;\n            }\n\n            queries = batchRequestOptions.documents.map(function (_a) {\n              var document = _a.document;\n              return resolveRequestDocument(document).query;\n            });\n            variables = batchRequestOptions.documents.map(function (_a) {\n              var variables = _a.variables;\n              return variables;\n            });\n            return [4\n            /*yield*/\n            , makeRequest({\n              url: url,\n              query: queries,\n              variables: variables,\n              headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(batchRequestOptions.requestHeaders)),\n              operationName: undefined,\n              fetch: fetch,\n              method: method,\n              fetchOptions: fetchOptions\n            })];\n\n          case 1:\n            data = _d.sent().data;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n\n  GraphQLClient.prototype.setHeaders = function (headers) {\n    this.options.headers = headers;\n    return this;\n  };\n  /**\n   * Attach a header to the client. All subsequent requests will have this header.\n   */\n\n\n  GraphQLClient.prototype.setHeader = function (key, value) {\n    var _a;\n\n    var headers = this.options.headers;\n\n    if (headers) {\n      // todo what if headers is in nested array form... ?\n      //@ts-ignore\n      headers[key] = value;\n    } else {\n      this.options.headers = (_a = {}, _a[key] = value, _a);\n    }\n\n    return this;\n  };\n  /**\n   * Change the client endpoint. All subsequent requests will send to this endpoint.\n   */\n\n\n  GraphQLClient.prototype.setEndpoint = function (value) {\n    this.url = value;\n    return this;\n  };\n\n  return GraphQLClient;\n}();\n\nexports.GraphQLClient = GraphQLClient;\n\nfunction makeRequest(_a) {\n  var url = _a.url,\n      query = _a.query,\n      variables = _a.variables,\n      headers = _a.headers,\n      operationName = _a.operationName,\n      fetch = _a.fetch,\n      _b = _a.method,\n      method = _b === void 0 ? 'POST' : _b,\n      fetchOptions = _a.fetchOptions;\n  return __awaiter(this, void 0, void 0, function () {\n    var fetcher, isBathchingQuery, response, result, successfullyReceivedData, successfullyPassedErrorPolicy, headers_1, status_1, errors, rest, data, errorResult;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          fetcher = method.toUpperCase() === 'POST' ? post : get;\n          isBathchingQuery = Array.isArray(query);\n          return [4\n          /*yield*/\n          , fetcher({\n            url: url,\n            query: query,\n            variables: variables,\n            operationName: operationName,\n            headers: headers,\n            fetch: fetch,\n            fetchOptions: fetchOptions\n          })];\n\n        case 1:\n          response = _c.sent();\n          return [4\n          /*yield*/\n          , getResult(response, fetchOptions.jsonSerializer)];\n\n        case 2:\n          result = _c.sent();\n          successfullyReceivedData = isBathchingQuery && Array.isArray(result) ? !result.some(function (_a) {\n            var data = _a.data;\n            return !data;\n          }) : !!result.data;\n          successfullyPassedErrorPolicy = !result.errors || fetchOptions.errorPolicy === 'all' || fetchOptions.errorPolicy === 'ignore';\n\n          if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\n            headers_1 = response.headers, status_1 = response.status;\n            errors = result.errors, rest = __rest(result, [\"errors\"]);\n            data = fetchOptions.errorPolicy === 'ignore' ? rest : result;\n            return [2\n            /*return*/\n            , __assign(__assign({}, isBathchingQuery ? {\n              data: data\n            } : data), {\n              headers: headers_1,\n              status: status_1\n            })];\n          } else {\n            errorResult = typeof result === 'string' ? {\n              error: result\n            } : result;\n            throw new types_1.ClientError(__assign(__assign({}, errorResult), {\n              status: response.status,\n              headers: response.headers\n            }), {\n              query: query,\n              variables: variables\n            });\n          }\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction rawRequest(urlOrOptions, query, variables, requestHeaders) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestOptions, client;\n    return __generator(this, function (_a) {\n      requestOptions = parseArgs_1.parseRawRequestExtendedArgs(urlOrOptions, query, variables, requestHeaders);\n      client = new GraphQLClient(requestOptions.url);\n      return [2\n      /*return*/\n      , client.rawRequest(__assign({}, requestOptions))];\n    });\n  });\n}\n\nexports.rawRequest = rawRequest;\n\nfunction request(urlOrOptions, document, variables, requestHeaders) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestOptions, client;\n    return __generator(this, function (_a) {\n      requestOptions = parseArgs_1.parseRequestExtendedArgs(urlOrOptions, document, variables, requestHeaders);\n      client = new GraphQLClient(requestOptions.url);\n      return [2\n      /*return*/\n      , client.request(__assign({}, requestOptions))];\n    });\n  });\n}\n\nexports.request = request;\n\nfunction batchRequests(urlOrOptions, documents, requestHeaders) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestOptions, client;\n    return __generator(this, function (_a) {\n      requestOptions = parseArgs_1.parseBatchRequestsExtendedArgs(urlOrOptions, documents, requestHeaders);\n      client = new GraphQLClient(requestOptions.url);\n      return [2\n      /*return*/\n      , client.batchRequests(__assign({}, requestOptions))];\n    });\n  });\n}\n\nexports.batchRequests = batchRequests;\nexports.default = request;\n/**\n * todo\n */\n\nfunction getResult(response, jsonSerializer) {\n  if (jsonSerializer === void 0) {\n    jsonSerializer = defaultJsonSerializer_1.defaultJsonSerializer;\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var contentType, _a, _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          response.headers.forEach(function (value, key) {\n            if (key.toLowerCase() === 'content-type') {\n              contentType = value;\n            }\n          });\n          if (!(contentType && contentType.toLowerCase().startsWith('application/json'))) return [3\n          /*break*/\n          , 2];\n          _b = (_a = jsonSerializer).parse;\n          return [4\n          /*yield*/\n          , response.text()];\n\n        case 1:\n          return [2\n          /*return*/\n          , _b.apply(_a, [_c.sent()])];\n\n        case 2:\n          return [2\n          /*return*/\n          , response.text()];\n      }\n    });\n  });\n}\n/**\n * helpers\n */\n\n\nfunction extractOperationName(document) {\n  var _a;\n\n  var operationName = undefined;\n  var operationDefinitions = document.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition';\n  });\n\n  if (operationDefinitions.length === 1) {\n    operationName = (_a = operationDefinitions[0].name) === null || _a === void 0 ? void 0 : _a.value;\n  }\n\n  return operationName;\n}\n\nfunction resolveRequestDocument(document) {\n  if (typeof document === 'string') {\n    var operationName_1 = undefined;\n\n    try {\n      var parsedDocument = parser_1.parse(document);\n      operationName_1 = extractOperationName(parsedDocument);\n    } catch (err) {// Failed parsing the document, the operationName will be undefined\n    }\n\n    return {\n      query: document,\n      operationName: operationName_1\n    };\n  }\n\n  var operationName = extractOperationName(document);\n  return {\n    query: printer_1.print(document),\n    operationName: operationName\n  };\n}\n\nexports.resolveRequestDocument = resolveRequestDocument;\n\nfunction callOrIdentity(value) {\n  return typeof value === 'function' ? value() : value;\n}\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\n\n\nfunction gql(chunks) {\n  var variables = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    variables[_i - 1] = arguments[_i];\n  }\n\n  return chunks.reduce(function (accumulator, chunk, index) {\n    return \"\" + accumulator + chunk + (index in variables ? variables[index] : '');\n  }, '');\n}\n\nexports.gql = gql;\n/**\n * Convert Headers instance into regular object\n */\n\nfunction HeadersInstanceToPlainObject(headers) {\n  var o = {};\n  headers.forEach(function (v, k) {\n    o[k] = v;\n  });\n  return o;\n}\n\nvar graphql_ws_1 = require(\"./graphql-ws\");\n\nObject.defineProperty(exports, \"GraphQLWebSocketClient\", {\n  enumerable: true,\n  get: function () {\n    return graphql_ws_1.GraphQLWebSocketClient;\n  }\n});","map":{"version":3,"mappings":"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","names":["Object","enumerable","get","types_1","resolveHeaders","headers","oHeaders","Headers","CrossFetch","HeadersInstanceToPlainObject","Array","isArray","forEach","_a","name","value","queryCleanner","str","replace","trim","buildGetQueryParams","query","variables","operationName","jsonSerializer","search","encodeURIComponent","push","stringify","join","Error","payload","reduce","accu","currentQuery","index","undefined","post","url","fetch","fetchOptions","body","createRequestBody_1","__assign","method","_b","queryParams","options","GraphQLClient","queryOrOptions","requestHeaders","rawRequestOptions","parseArgs_1","cross_fetch_1","_c","signal","resolveRequestDocument","makeRequest","callOrIdentity","documentOrOptions","requestOptions","_d","document","data","_e","documentsOrOptions","batchRequestOptions","queries","documents","map","key","exports","fetcher","toUpperCase","isBathchingQuery","response","getResult","result","successfullyReceivedData","some","successfullyPassedErrorPolicy","errors","errorPolicy","ok","headers_1","status_1","rest","status","errorResult","error","rawRequest","urlOrOptions","client","request","batchRequests","defaultJsonSerializer_1","toLowerCase","contentType","startsWith","parse","text","extractOperationName","operationDefinitions","definitions","filter","definition","kind","length","operationName_1","parsedDocument","parser_1","err","printer_1","gql","chunks","accumulator","chunk","o","v","k"],"sources":["/Users/natehanson/Desktop/reactiondata-frontend/node_modules/graphql-request/src/index.ts"],"sourcesContent":["import crossFetch, * as CrossFetch from 'cross-fetch'\nimport { OperationDefinitionNode, DocumentNode } from 'graphql/language/ast'\n\nimport { parse } from 'graphql/language/parser'\nimport { print } from 'graphql/language/printer'\nimport createRequestBody from './createRequestBody'\nimport { defaultJsonSerializer } from './defaultJsonSerializer'\nimport {\n  parseBatchRequestArgs,\n  parseRawRequestArgs,\n  parseRequestArgs,\n  parseBatchRequestsExtendedArgs,\n  parseRawRequestExtendedArgs,\n  parseRequestExtendedArgs,\n} from './parseArgs'\nimport {\n  BatchRequestDocument,\n  BatchRequestsOptions,\n  ClientError,\n  RawRequestOptions,\n  RequestDocument,\n  RequestOptions,\n  BatchRequestsExtendedOptions,\n  RawRequestExtendedOptions,\n  RequestExtendedOptions,\n  Variables,\n  PatchedRequestInit,\n  MaybeFunction,\n  GraphQLError,\n} from './types'\nimport * as Dom from './types.dom'\n\nexport {\n  BatchRequestDocument,\n  BatchRequestsOptions,\n  BatchRequestsExtendedOptions,\n  ClientError,\n  RawRequestOptions,\n  RawRequestExtendedOptions,\n  RequestDocument,\n  RequestOptions,\n  RequestExtendedOptions,\n  Variables,\n}\n\n/**\n * Convert the given headers configuration into a plain object.\n */\nconst resolveHeaders = (headers: Dom.RequestInit['headers']): Record<string, string> => {\n  let oHeaders: Record<string, string> = {}\n  if (headers) {\n    if (\n      (typeof Headers !== 'undefined' && headers instanceof Headers) ||\n      headers instanceof CrossFetch.Headers\n    ) {\n      oHeaders = HeadersInstanceToPlainObject(headers)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(([name, value]) => {\n        oHeaders[name] = value\n      })\n    } else {\n      oHeaders = headers as Record<string, string>\n    }\n  }\n\n  return oHeaders\n}\n\n/**\n * Clean a GraphQL document to send it via a GET query\n *\n * @param {string} str GraphQL query\n * @returns {string} Cleaned query\n */\nconst queryCleanner = (str: string): string => str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ' ').trim()\n\ntype TBuildGetQueryParams<V> =\n  | { query: string; variables: V | undefined; operationName: string | undefined; jsonSerializer: Dom.JsonSerializer }\n  | { query: string[]; variables: V[] | undefined; operationName: undefined; jsonSerializer: Dom.JsonSerializer }\n\n/**\n * Create query string for GraphQL request\n *\n * @param {object} param0 -\n *\n * @param {string|string[]} param0.query the GraphQL document or array of document if it's a batch request\n * @param {string|undefined} param0.operationName the GraphQL operation name\n * @param {any|any[]} param0.variables the GraphQL variables to use\n */\nconst buildGetQueryParams = <V>({ query, variables, operationName, jsonSerializer }: TBuildGetQueryParams<V>): string => {\n  if (!Array.isArray(query)) {\n    const search: string[] = [`query=${encodeURIComponent(queryCleanner(query))}`]\n\n    if (variables) {\n      search.push(`variables=${encodeURIComponent(jsonSerializer.stringify(variables))}`)\n    }\n\n    if (operationName) {\n      search.push(`operationName=${encodeURIComponent(operationName)}`)\n    }\n\n    return search.join('&')\n  }\n\n  if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n    throw new Error('Cannot create query with given variable type, array expected')\n  }\n\n  // Batch support\n  const payload = query.reduce<{ query: string; variables: string | undefined }[]>(\n    (accu, currentQuery, index) => {\n      accu.push({\n        query: queryCleanner(currentQuery),\n        variables: variables ? jsonSerializer.stringify(variables[index]) : undefined,\n      })\n      return accu\n    },\n    []\n  )\n\n  return `query=${encodeURIComponent(jsonSerializer.stringify(payload))}`\n}\n\n/**\n * Fetch data using POST method\n */\nconst post = async <V = Variables>({\n  url,\n  query,\n  variables,\n  operationName,\n  headers,\n  fetch,\n  fetchOptions,\n}: {\n  url: string\n  query: string | string[]\n  fetch: any\n  fetchOptions: Dom.RequestInit\n  variables?: V\n  headers?: Dom.RequestInit['headers']\n  operationName?: string\n}) => {\n  const body = createRequestBody(query, variables, operationName, fetchOptions.jsonSerializer)\n\n  return await fetch(url, {\n    method: 'POST',\n    headers: {\n      ...(typeof body === 'string' ? { 'Content-Type': 'application/json' } : {}),\n      ...headers,\n    },\n    body,\n    ...fetchOptions,\n  })\n}\n\n/**\n * Fetch data using GET method\n */\nconst get = async <V = Variables>({\n  url,\n  query,\n  variables,\n  operationName,\n  headers,\n  fetch,\n  fetchOptions,\n}: {\n  url: string\n  query: string | string[]\n  fetch: any\n  fetchOptions: Dom.RequestInit\n  variables?: V\n  headers?: HeadersInit\n  operationName?: string\n}) => {\n  const queryParams = buildGetQueryParams<V>({\n    query,\n    variables,\n    operationName,\n    jsonSerializer: fetchOptions.jsonSerializer\n  } as TBuildGetQueryParams<V>)\n\n  return await fetch(`${url}?${queryParams}`, {\n    method: 'GET',\n    headers,\n    ...fetchOptions,\n  })\n}\n\n/**\n * GraphQL Client.\n */\nexport class GraphQLClient {\n  private url: string\n  private options: PatchedRequestInit\n\n  constructor(url: string, options?: PatchedRequestInit) {\n    this.url = url\n    this.options = options || {}\n  }\n\n  /**\n   * Send a GraphQL query to the server.\n   */\n  async rawRequest<T = any, V = Variables>(\n    query: string,\n    variables?: V,\n    requestHeaders?: Dom.RequestInit['headers']\n  ): Promise<{ data: T; extensions?: any; headers: Dom.Headers; errors?: GraphQLError[]; status: number }>\n  async rawRequest<T = any, V = Variables>(\n    options: RawRequestOptions<V>\n  ): Promise<{ data: T; extensions?: any; headers: Dom.Headers; errors?: GraphQLError[]; status: number }>\n  async rawRequest<T = any, V = Variables>(\n    queryOrOptions: string | RawRequestOptions<V>,\n    variables?: V,\n    requestHeaders?: Dom.RequestInit['headers']\n  ): Promise<{ data: T; extensions?: any; headers: Dom.Headers; errors?: GraphQLError[]; status: number }> {\n    const rawRequestOptions = parseRawRequestArgs<V>(queryOrOptions, variables, requestHeaders)\n\n    let { headers, fetch = crossFetch, method = 'POST', ...fetchOptions } = this.options\n    let { url } = this\n    if (rawRequestOptions.signal !== undefined) {\n      fetchOptions.signal = rawRequestOptions.signal\n    }\n\n    const { operationName } = resolveRequestDocument(rawRequestOptions.query)\n\n    return makeRequest<T, V>({\n      url,\n      query: rawRequestOptions.query,\n      variables: rawRequestOptions.variables,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(rawRequestOptions.requestHeaders),\n      },\n      operationName,\n      fetch,\n      method,\n      fetchOptions,\n    })\n  }\n\n  /**\n   * Send a GraphQL document to the server.\n   */\n  async request<T = any, V = Variables>(\n    document: RequestDocument,\n    variables?: V,\n    requestHeaders?: Dom.RequestInit['headers']\n  ): Promise<T>\n  async request<T = any, V = Variables>(options: RequestOptions<V>): Promise<T>\n  async request<T = any, V = Variables>(\n    documentOrOptions: RequestDocument | RequestOptions<V>,\n    variables?: V,\n    requestHeaders?: Dom.RequestInit['headers']\n  ): Promise<T> {\n    const requestOptions = parseRequestArgs<V>(documentOrOptions, variables, requestHeaders)\n\n    let { headers, fetch = crossFetch, method = 'POST', ...fetchOptions } = this.options\n    let { url } = this\n    if (requestOptions.signal !== undefined) {\n      fetchOptions.signal = requestOptions.signal\n    }\n\n    const { query, operationName } = resolveRequestDocument(requestOptions.document)\n\n    const { data } = await makeRequest<T, V>({\n      url,\n      query,\n      variables: requestOptions.variables,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(requestOptions.requestHeaders),\n      },\n      operationName,\n      fetch,\n      method,\n      fetchOptions,\n    })\n\n    return data\n  }\n\n  /**\n   * Send GraphQL documents in batch to the server.\n   */\n  async batchRequests<T extends any = any, V = Variables>(\n    documents: BatchRequestDocument<V>[],\n    requestHeaders?: Dom.RequestInit['headers']\n  ): Promise<T>\n  async batchRequests<T = any, V = Variables>(options: BatchRequestsOptions<V>): Promise<T>\n  async batchRequests<T = any, V = Variables>(\n    documentsOrOptions: BatchRequestDocument<V>[] | BatchRequestsOptions<V>,\n    requestHeaders?: Dom.RequestInit['headers']\n  ): Promise<T> {\n    const batchRequestOptions = parseBatchRequestArgs<V>(documentsOrOptions, requestHeaders)\n\n    let { headers, fetch = crossFetch, method = 'POST', ...fetchOptions } = this.options\n    let { url } = this\n    if (batchRequestOptions.signal !== undefined) {\n      fetchOptions.signal = batchRequestOptions.signal\n    }\n\n    const queries = batchRequestOptions.documents.map(\n      ({ document }) => resolveRequestDocument(document).query\n    )\n    const variables = batchRequestOptions.documents.map(({ variables }) => variables)\n\n    const { data } = await makeRequest<T, (V | undefined)[]>({\n      url,\n      query: queries,\n      variables,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(batchRequestOptions.requestHeaders),\n      },\n      operationName: undefined,\n      fetch,\n      method,\n      fetchOptions,\n    })\n\n    return data\n  }\n\n  setHeaders(headers: Dom.RequestInit['headers']): GraphQLClient {\n    this.options.headers = headers\n    return this\n  }\n\n  /**\n   * Attach a header to the client. All subsequent requests will have this header.\n   */\n  setHeader(key: string, value: string): GraphQLClient {\n    const { headers } = this.options\n\n    if (headers) {\n      // todo what if headers is in nested array form... ?\n      //@ts-ignore\n      headers[key] = value\n    } else {\n      this.options.headers = { [key]: value }\n    }\n\n    return this\n  }\n\n  /**\n   * Change the client endpoint. All subsequent requests will send to this endpoint.\n   */\n  setEndpoint(value: string): GraphQLClient {\n    this.url = value\n    return this\n  }\n}\n\nasync function makeRequest<T = any, V = Variables>({\n  url,\n  query,\n  variables,\n  headers,\n  operationName,\n  fetch,\n  method = 'POST',\n  fetchOptions,\n}: {\n  url: string\n  query: string | string[]\n  variables?: V\n  headers?: Dom.RequestInit['headers']\n  operationName?: string\n  fetch: any\n  method: string\n  fetchOptions: Dom.RequestInit\n}): Promise<{ data: T; extensions?: any; headers: Dom.Headers; errors?: GraphQLError[]; status: number }> {\n  const fetcher = method.toUpperCase() === 'POST' ? post : get\n  const isBathchingQuery = Array.isArray(query)\n\n  const response = await fetcher({\n    url,\n    query,\n    variables,\n    operationName,\n    headers,\n    fetch,\n    fetchOptions,\n  })\n  const result = await getResult(response, fetchOptions.jsonSerializer)\n\n  const successfullyReceivedData =\n    isBathchingQuery && Array.isArray(result) ? !result.some(({ data }) => !data) : !!result.data\n\n  const successfullyPassedErrorPolicy =\n    !result.errors || fetchOptions.errorPolicy === 'all' || fetchOptions.errorPolicy === 'ignore'\n\n  if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\n    const { headers, status } = response\n\n    const { errors, ...rest } = result\n    const data = fetchOptions.errorPolicy === 'ignore' ? rest : result\n    \n    return {\n      ...(isBathchingQuery ? { data } : data),\n      headers,\n      status,\n    }\n  } else {\n    const errorResult = typeof result === 'string' ? { error: result } : result\n    throw new ClientError(\n      { ...errorResult, status: response.status, headers: response.headers },\n      { query, variables }\n    )\n  }\n}\n\n/**\n * Send a GraphQL Query to the GraphQL server for execution.\n */\nexport async function rawRequest<T = any, V = Variables>(\n  url: string,\n  query: string,\n  variables?: V,\n  requestHeaders?: Dom.RequestInit['headers']\n): Promise<{ data: T; extensions?: any; headers: Dom.Headers; status: number }>\nexport async function rawRequest<T = any, V = Variables>(\n  options: RawRequestExtendedOptions<V>\n): Promise<{ data: T; extensions?: any; headers: Dom.Headers; status: number }>\nexport async function rawRequest<T = any, V = Variables>(\n  urlOrOptions: string | RawRequestExtendedOptions<V>,\n  query?: string,\n  variables?: V,\n  requestHeaders?: Dom.RequestInit['headers']\n): Promise<{ data: T; extensions?: any; headers: Dom.Headers; status: number }> {\n  const requestOptions = parseRawRequestExtendedArgs<V>(urlOrOptions, query, variables, requestHeaders)\n  const client = new GraphQLClient(requestOptions.url)\n  return client.rawRequest<T, V>({\n    ...requestOptions,\n  })\n}\n\n/**\n * Send a GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await request('https://foo.bar/graphql', `\n *   {\n *     query {\n *       users\n *     }\n *   }\n * `)\n *\n * // You can also pass a GraphQL DocumentNode. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * // If you don't actually care about using DocumentNode but just\n * // want the tooling support for gql template tag like IDE syntax\n * // coloring and prettier autoformat then note you can use the\n * // passthrough gql tag shipped with graphql-request to save a bit\n * // of performance and not have to install another dep into your project.\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n */\nexport async function request<T = any, V = Variables>(\n  url: string,\n  document: RequestDocument,\n  variables?: V,\n  requestHeaders?: Dom.RequestInit['headers']\n): Promise<T>\nexport async function request<T = any, V = Variables>(options: RequestExtendedOptions<V>): Promise<T>\nexport async function request<T = any, V = Variables>(\n  urlOrOptions: string | RequestExtendedOptions<V>,\n  document?: RequestDocument,\n  variables?: V,\n  requestHeaders?: Dom.RequestInit['headers']\n): Promise<T> {\n  const requestOptions = parseRequestExtendedArgs<V>(urlOrOptions, document, variables, requestHeaders)\n  const client = new GraphQLClient(requestOptions.url)\n  return client.request<T, V>({\n    ...requestOptions,\n  })\n}\n\n/**\n * Send a batch of GraphQL Document to the GraphQL server for exectuion.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\nexport async function batchRequests<T = any, V = Variables>(\n  url: string,\n  documents: BatchRequestDocument<V>[],\n  requestHeaders?: Dom.RequestInit['headers']\n): Promise<T>\nexport async function batchRequests<T = any, V = Variables>(\n  options: BatchRequestsExtendedOptions<V>\n): Promise<T>\nexport async function batchRequests<T = any, V = Variables>(\n  urlOrOptions: string | BatchRequestsExtendedOptions<V>,\n  documents?: BatchRequestDocument<V>[],\n  requestHeaders?: Dom.RequestInit['headers']\n): Promise<T> {\n  const requestOptions = parseBatchRequestsExtendedArgs<V>(urlOrOptions, documents, requestHeaders)\n  const client = new GraphQLClient(requestOptions.url)\n  return client.batchRequests<T, V>({ ...requestOptions })\n}\n\nexport default request\n\n/**\n * todo\n */\nasync function getResult(response: Dom.Response, jsonSerializer = defaultJsonSerializer): Promise<any> {\n  let contentType: string | undefined\n\n  response.headers.forEach((value, key) => {\n    if (key.toLowerCase() === 'content-type') {\n      contentType = value\n    }\n  })\n\n  if (contentType && contentType.toLowerCase().startsWith('application/json')) {\n    return jsonSerializer.parse(await response.text())\n  } else {\n    return response.text()\n  }\n}\n/**\n * helpers\n */\n\nfunction extractOperationName(document: DocumentNode): string | undefined {\n  let operationName = undefined\n\n  const operationDefinitions = document.definitions.filter(\n    (definition) => definition.kind === 'OperationDefinition'\n  ) as OperationDefinitionNode[]\n\n  if (operationDefinitions.length === 1) {\n    operationName = operationDefinitions[0].name?.value\n  }\n\n  return operationName\n}\n\nexport function resolveRequestDocument(document: RequestDocument): { query: string; operationName?: string } {\n  if (typeof document === 'string') {\n    let operationName = undefined\n\n    try {\n      const parsedDocument = parse(document)\n      operationName = extractOperationName(parsedDocument)\n    } catch (err) {\n      // Failed parsing the document, the operationName will be undefined\n    }\n\n    return { query: document, operationName }\n  }\n\n  const operationName = extractOperationName(document)\n\n  return { query: print(document), operationName }\n}\n\nfunction callOrIdentity<T>(value: MaybeFunction<T>) {\n  return typeof value === 'function' ? (value as () => T)() : value;\n}\n\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nexport function gql(chunks: TemplateStringsArray, ...variables: any[]): string {\n  return chunks.reduce(\n    (accumulator, chunk, index) => `${accumulator}${chunk}${index in variables ? variables[index] : ''}`,\n    ''\n  )\n}\n\n/**\n * Convert Headers instance into regular object\n */\nfunction HeadersInstanceToPlainObject(headers: Dom.Response['headers']): Record<string, string> {\n  const o: any = {}\n  headers.forEach((v, k) => {\n    o[k] = v\n  })\n  return o\n}\n\nexport { GraphQLWebSocketClient } from './graphql-ws'\n"]},"metadata":{},"sourceType":"script"}