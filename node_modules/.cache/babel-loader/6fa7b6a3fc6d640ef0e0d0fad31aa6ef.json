{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\n// External\nimport { useQueryClient } from \"react-query\";\nimport { gql } from \"graphql-request\"; // Internal\n\nimport { useGqlQuery, useGqlMutation } from \"api/Api\"; // GRAPHQL API\n\nexport const useFetchAudiencesGql = (page, perPage) => {\n  _s();\n\n  const query = gql`\n    query {\n      allAudiences(page: ${page}, perPage: ${perPage}) {\n        id\n        name\n        description\n        members\n        contact_ids\n        created_at\n        modified_at\n      }\n    }\n  `;\n  return useGqlQuery([\"audience\"], query, {});\n};\n\n_s(useFetchAudiencesGql, \"OIuQPBGUklVORIy//JVFJUY4r0c=\", false, function () {\n  return [useGqlQuery];\n});\n\nexport const useFetchAudienceGql = id => {\n  _s2();\n\n  const query = gql`\n    query {\n      Audience(id: \"${id}\") {\n        id\n        name\n        description\n      }\n    }\n  `;\n  return useGqlQuery([\"audience\", id], query, {});\n};\n\n_s2(useFetchAudienceGql, \"OIuQPBGUklVORIy//JVFJUY4r0c=\", false, function () {\n  return [useGqlQuery];\n});\n\nexport const useCreateAudienceGql = () => {\n  _s3();\n\n  const mutation = gql`\n    mutation CreateAudience(\n      $name: String!\n      $members: Int!\n      $contact_ids: [String]!\n      $created_at: String!\n      $modified_at: String!\n      $description: String!\n      $type: String!\n    ) {\n      createAudience(\n        name: $name,\n        members: $members,\n        contact_ids: $contact_ids,\n        created_at: $created_at,\n        modified_at: $modified_at,\n        description: $description,\n        type: $type\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"audience\");\n    }\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s3(useCreateAudienceGql, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});\n\nexport const useUpdateAudienceGql = () => {\n  _s4();\n\n  const mutation = gql`\n    mutation UpdateAudience(\n      $id: ID!\n      $name: String\n      $members: Int\n      $contact_ids: [String]\n      $created_at: String\n      $modified_at: String\n      $description: String\n    ) {\n      updateAudience(\n        id: $id, \n        name: $name,\n        members: $members,\n        contact_ids: $contact_ids,\n        created_at: $created_at,\n        modified_at: $modified_at,\n        description: $description\n        ) {\n        ok\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"audience\"]);\n    }\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s4(useUpdateAudienceGql, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});\n\nexport const useDeleteAudienceGql = () => {\n  _s5();\n\n  const mutation = gql`\n    mutation RemoveAudience($id: ID!) {\n      removeAudience(id: $id) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"audience\"]);\n    }\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s5(useDeleteAudienceGql, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});","map":{"version":3,"names":["useQueryClient","gql","useGqlQuery","useGqlMutation","useFetchAudiencesGql","page","perPage","query","useFetchAudienceGql","id","useCreateAudienceGql","mutation","queryClient","options","onError","err","_project","rollback","onSettled","invalidateQueries","useUpdateAudienceGql","onSuccess","useDeleteAudienceGql"],"sources":["/Users/natehanson/Desktop/reactiondata-frontend/src/api/resources/contacts/audiences.js"],"sourcesContent":["// External\nimport { useQueryClient } from \"react-query\";\nimport { gql } from \"graphql-request\";\n\n// Internal\nimport { useGqlQuery, useGqlMutation } from \"api/Api\";\n\n// GRAPHQL API\n\nexport const useFetchAudiencesGql = (page, perPage) => {\n  const query = gql`\n    query {\n      allAudiences(page: ${page}, perPage: ${perPage}) {\n        id\n        name\n        description\n        members\n        contact_ids\n        created_at\n        modified_at\n      }\n    }\n  `;\n\n  return useGqlQuery([\"audience\"], query, {});\n};\n\nexport const useFetchAudienceGql = (id) => {\n  const query = gql`\n    query {\n      Audience(id: \"${id}\") {\n        id\n        name\n        description\n      }\n    }\n  `;\n\n  return useGqlQuery([\"audience\", id], query, {});\n};\n\nexport const useCreateAudienceGql = () => {\n  const mutation = gql`\n    mutation CreateAudience(\n      $name: String!\n      $members: Int!\n      $contact_ids: [String]!\n      $created_at: String!\n      $modified_at: String!\n      $description: String!\n      $type: String!\n    ) {\n      createAudience(\n        name: $name,\n        members: $members,\n        contact_ids: $contact_ids,\n        created_at: $created_at,\n        modified_at: $modified_at,\n        description: $description,\n        type: $type\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"audience\");\n    },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\nexport const useUpdateAudienceGql = () => {\n  const mutation = gql`\n    mutation UpdateAudience(\n      $id: ID!\n      $name: String\n      $members: Int\n      $contact_ids: [String]\n      $created_at: String\n      $modified_at: String\n      $description: String\n    ) {\n      updateAudience(\n        id: $id, \n        name: $name,\n        members: $members,\n        contact_ids: $contact_ids,\n        created_at: $created_at,\n        modified_at: $modified_at,\n        description: $description\n        ) {\n        ok\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"audience\"]);\n    },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\nexport const useDeleteAudienceGql = () => {\n  const mutation = gql`\n    mutation RemoveAudience($id: ID!) {\n      removeAudience(id: $id) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"audience\"]);\n    },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n"],"mappings":";;;;;;AAAA;AACA,SAASA,cAAT,QAA+B,aAA/B;AACA,SAASC,GAAT,QAAoB,iBAApB,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,SAA5C,C,CAEA;;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmB;EAAA;;EACrD,MAAMC,KAAK,GAAGN,GAAI;AACpB;AACA,2BAA2BI,IAAK,cAAaC,OAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAZE;EAcA,OAAOJ,WAAW,CAAC,CAAC,UAAD,CAAD,EAAeK,KAAf,EAAsB,EAAtB,CAAlB;AACD,CAhBM;;GAAMH,oB;UAeJF,W;;;AAGT,OAAO,MAAMM,mBAAmB,GAAIC,EAAD,IAAQ;EAAA;;EACzC,MAAMF,KAAK,GAAGN,GAAI;AACpB;AACA,sBAAsBQ,EAAG;AACzB;AACA;AACA;AACA;AACA;AACA,GARE;EAUA,OAAOP,WAAW,CAAC,CAAC,UAAD,EAAaO,EAAb,CAAD,EAAmBF,KAAnB,EAA0B,EAA1B,CAAlB;AACD,CAZM;;IAAMC,mB;UAWJN,W;;;AAGT,OAAO,MAAMQ,oBAAoB,GAAG,MAAM;EAAA;;EACxC,MAAMC,QAAQ,GAAGV,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAtBE;EAuBA,MAAMW,WAAW,GAAGZ,cAAc,EAAlC;EACA,MAAMa,OAAO,GAAG;IACdC,OAAO,EAAE,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,KAA6B;MACpC,IAAIA,QAAJ,EAAcA,QAAQ;IACvB,CAHa;IAIdC,SAAS,EAAE,MAAM;MACfN,WAAW,CAACO,iBAAZ,CAA8B,UAA9B;IACD;EANa,CAAhB;EASA,OAAOhB,cAAc,CAACQ,QAAD,EAAWE,OAAX,CAArB;AACD,CAnCM;;IAAMH,oB;UAwBSV,c,EAUbG,c;;;AAGT,OAAO,MAAMiB,oBAAoB,GAAG,MAAM;EAAA;;EACxC,MAAMT,QAAQ,GAAGV,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAtBE;EAuBA,MAAMW,WAAW,GAAGZ,cAAc,EAAlC;EACA,MAAMa,OAAO,GAAG;IACdC,OAAO,EAAE,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,KAA6B;MACpC,IAAIA,QAAJ,EAAcA,QAAQ;IACvB,CAHa;IAIdI,SAAS,EAAE,MAAM;MACfT,WAAW,CAACO,iBAAZ,CAA8B,CAAC,UAAD,CAA9B;IACD;EANa,CAAhB;EASA,OAAOhB,cAAc,CAACQ,QAAD,EAAWE,OAAX,CAArB;AACD,CAnCM;;IAAMO,oB;UAwBSpB,c,EAUbG,c;;;AAGT,OAAO,MAAMmB,oBAAoB,GAAG,MAAM;EAAA;;EACxC,MAAMX,QAAQ,GAAGV,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA,GANE;EAOA,MAAMW,WAAW,GAAGZ,cAAc,EAAlC;EACA,MAAMa,OAAO,GAAG;IACdQ,SAAS,EAAE,MAAM;MACfT,WAAW,CAACO,iBAAZ,CAA8B,CAAC,UAAD,CAA9B;IACD;EAHa,CAAhB;EAMA,OAAOhB,cAAc,CAACQ,QAAD,EAAWE,OAAX,CAArB;AACD,CAhBM;;IAAMS,oB;UAQStB,c,EAObG,c"},"metadata":{},"sourceType":"module"}