{"ast":null,"code":"var _jsxFileName = \"/Users/natehanson/Desktop/reactiondata-frontend/src/components/inputs/input_fields/ToggleSwitch/ToggleSwitch.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styles from \"./ToggleSwitch.module.scss\";\n/**\n * a customized checkbox disguised as a switch\n * @param {Boolean} startChecked tells the component to start checked or not\n * @param {Function} handleCheck called when the switch to toggled and returns whether it is checked or not\n * @param {String} id an id that is placed in the input to be able to be referenced by javascript\n * @returns {React.ReactElement} a numberscale clickable component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ToggleSwitch = _ref => {\n  _s();\n\n  let {\n    startChecked,\n    handleCheck,\n    id\n  } = _ref;\n  const [isChecked, setIsChecked] = useState(startChecked);\n\n  const handleChange = () => {\n    setIsChecked(!isChecked);\n\n    if (handleCheck) {\n      handleCheck(isChecked);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"label\", {\n      className: styles.switch,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: isChecked,\n        onChange: handleChange,\n        id: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles.slider\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ToggleSwitch, \"2vWs3AAS29guU/HLDnHG6up5Zlw=\");\n\n_c = ToggleSwitch;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToggleSwitch\");","map":{"version":3,"names":["React","useState","styles","ToggleSwitch","startChecked","handleCheck","id","isChecked","setIsChecked","handleChange","switch","slider"],"sources":["/Users/natehanson/Desktop/reactiondata-frontend/src/components/inputs/input_fields/ToggleSwitch/ToggleSwitch.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"./ToggleSwitch.module.scss\";\n\n/**\n * a customized checkbox disguised as a switch\n * @param {Boolean} startChecked tells the component to start checked or not\n * @param {Function} handleCheck called when the switch to toggled and returns whether it is checked or not\n * @param {String} id an id that is placed in the input to be able to be referenced by javascript\n * @returns {React.ReactElement} a numberscale clickable component\n */\n\nexport const ToggleSwitch = ({ startChecked, handleCheck, id }) => {\n  const [isChecked, setIsChecked] = useState(startChecked);\n\n  const handleChange = () => {\n    setIsChecked(!isChecked);\n    if (handleCheck) {\n      handleCheck(isChecked);\n    }\n  };\n\n  return (\n    <div>\n      <label className={styles.switch}>\n        <input type=\"checkbox\" checked={isChecked} onChange={handleChange} id={id}/>\n        <span className={styles.slider}></span>\n      </label>\n    </div>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMC,YAAY,GAAG,QAAuC;EAAA;;EAAA,IAAtC;IAAEC,YAAF;IAAgBC,WAAhB;IAA6BC;EAA7B,CAAsC;EACjE,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAACG,YAAD,CAA1C;;EAEA,MAAMK,YAAY,GAAG,MAAM;IACzBD,YAAY,CAAC,CAACD,SAAF,CAAZ;;IACA,IAAIF,WAAJ,EAAiB;MACfA,WAAW,CAACE,SAAD,CAAX;IACD;EACF,CALD;;EAOA,oBACE;IAAA,uBACE;MAAO,SAAS,EAAEL,MAAM,CAACQ,MAAzB;MAAA,wBACE;QAAO,IAAI,EAAC,UAAZ;QAAuB,OAAO,EAAEH,SAAhC;QAA2C,QAAQ,EAAEE,YAArD;QAAmE,EAAE,EAAEH;MAAvE;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAM,SAAS,EAAEJ,MAAM,CAACS;MAAxB;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAQD,CAlBM;;GAAMR,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}