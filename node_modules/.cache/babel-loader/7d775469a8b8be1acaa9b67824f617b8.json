{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\n// External\nimport { useQueryClient } from \"react-query\";\nimport { gql } from \"graphql-request\"; // Internal\n\nimport { useGqlQuery, useGqlMutation } from \"api/Api\"; // GRAPHQL API\n\nexport const useFetchVisualizationsGql = () => {\n  _s();\n\n  const query = gql`\n    query {\n      allVisualizations {\n        id\n        project_id\n        question_id\n        type\n        total\n        index\n        title\n        titleLabel\n        selected\n        design_settings\n        Question {\n            id\n            name\n            type\n            description\n            instructions\n            otherOptionText\n            project_id\n            Choices {\n              id\n              choice_value\n            }\n            question_type_config\n        }\n      }\n    }\n  `;\n  return useGqlQuery([\"visualizaitons\"], query, {});\n};\n\n_s(useFetchVisualizationsGql, \"OIuQPBGUklVORIy//JVFJUY4r0c=\", false, function () {\n  return [useGqlQuery];\n});\n\nexport const useFetchVisualizationGql = id => {\n  _s2();\n\n  const query = gql`\n      query {\n        Visualization(id: \"${id}\") {\n            id\n            project_id\n            question_id\n            type\n            total\n            index\n            title\n            titleLabel\n            selected\n            design_settings\n            Question {\n                id\n                name\n                type\n                description\n                instructions\n                otherOptionText\n                project_id\n                Choices {\n                  id\n                  choice_value\n                }\n            }\n        }\n      }\n    `;\n  return useGqlQuery([\"visualizaitons\", id], query, {});\n};\n\n_s2(useFetchVisualizationGql, \"OIuQPBGUklVORIy//JVFJUY4r0c=\", false, function () {\n  return [useGqlQuery];\n});\n\nexport const useCreateVisualizationsGql = () => {\n  _s3();\n\n  const mutation = gql`\n    mutation CreateVisualization(\n        $project_id: ID!\n        $question_id: ID!\n        $type: String!\n        $total: Int!\n        $index: Int!\n        $title: String!\n        $titleLabel: String!\n        $selected: Boolean!\n        $design_settings: JSON!) {\n      createRole(\n        project_id: $project_id\n        question_id: $question_id\n        type: $type\n        total: $total\n        index: $index\n        title: $title\n        titleLabel: $titleLabel\n        selected: $selected\n        design_settings: $design_settings) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"visualizaitons\");\n    }\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s3(useCreateVisualizationsGql, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});\n\nexport const useUpdateVisualizationsGql = () => {\n  _s4();\n\n  const mutation = gql`\n  mutation UpdateVisualization(\n    $id: ID!\n    $project_id: ID\n    $question_id: ID\n    $type: String\n    $total: Int\n    $index: Int\n    $title: String\n    $titleLabel: String\n    $selected: Boolean\n    $design_settings: JSON) {\n  UpdateRole(\n    id: $id\n    project_id: $project_id\n    question_id: $question_id\n    type: $type\n    total: $total\n    index: $index\n    title: $title\n    titleLabel: $titleLabel\n    selected: $selected\n    design_settings: $design_settings) {\n    id\n  }\n}\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"visualizaitons\"]);\n    }\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s4(useUpdateVisualizationsGql, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});\n\nexport const useDeleteVisualizationsGql = () => {\n  _s5();\n\n  const mutation = gql`\n    mutation RemoveVisualization($id: ID!) {\n      removeVisualization(id: $id) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"visualizaitons\"]);\n    }\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s5(useDeleteVisualizationsGql, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});","map":{"version":3,"names":["useQueryClient","gql","useGqlQuery","useGqlMutation","useFetchVisualizationsGql","query","useFetchVisualizationGql","id","useCreateVisualizationsGql","mutation","queryClient","options","onError","err","_project","rollback","onSettled","invalidateQueries","useUpdateVisualizationsGql","onSuccess","useDeleteVisualizationsGql"],"sources":["/Users/natehanson/Desktop/reactiondata-frontend/src/api/resources/projects/visualizations.js"],"sourcesContent":["// External\nimport { useQueryClient } from \"react-query\";\nimport { gql } from \"graphql-request\";\n\n\n// Internal\nimport { useGqlQuery, useGqlMutation } from \"api/Api\";\n\n// GRAPHQL API\n\nexport const useFetchVisualizationsGql = () => {\n  const query = gql`\n    query {\n      allVisualizations {\n        id\n        project_id\n        question_id\n        type\n        total\n        index\n        title\n        titleLabel\n        selected\n        design_settings\n        Question {\n            id\n            name\n            type\n            description\n            instructions\n            otherOptionText\n            project_id\n            Choices {\n              id\n              choice_value\n            }\n            question_type_config\n        }\n      }\n    }\n  `;\n\n  return useGqlQuery([\"visualizaitons\"], query, {});\n};\n\nexport const useFetchVisualizationGql = (id) => {\n    const query = gql`\n      query {\n        Visualization(id: \"${id}\") {\n            id\n            project_id\n            question_id\n            type\n            total\n            index\n            title\n            titleLabel\n            selected\n            design_settings\n            Question {\n                id\n                name\n                type\n                description\n                instructions\n                otherOptionText\n                project_id\n                Choices {\n                  id\n                  choice_value\n                }\n            }\n        }\n      }\n    `;\n  \n    return useGqlQuery([\"visualizaitons\", id], query, {});\n  };\n\nexport const useCreateVisualizationsGql = () => {\n  const mutation = gql`\n    mutation CreateVisualization(\n        $project_id: ID!\n        $question_id: ID!\n        $type: String!\n        $total: Int!\n        $index: Int!\n        $title: String!\n        $titleLabel: String!\n        $selected: Boolean!\n        $design_settings: JSON!) {\n      createRole(\n        project_id: $project_id\n        question_id: $question_id\n        type: $type\n        total: $total\n        index: $index\n        title: $title\n        titleLabel: $titleLabel\n        selected: $selected\n        design_settings: $design_settings) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"visualizaitons\");\n    },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\nexport const useUpdateVisualizationsGql = () => {\n  const mutation = gql`\n  mutation UpdateVisualization(\n    $id: ID!\n    $project_id: ID\n    $question_id: ID\n    $type: String\n    $total: Int\n    $index: Int\n    $title: String\n    $titleLabel: String\n    $selected: Boolean\n    $design_settings: JSON) {\n  UpdateRole(\n    id: $id\n    project_id: $project_id\n    question_id: $question_id\n    type: $type\n    total: $total\n    index: $index\n    title: $title\n    titleLabel: $titleLabel\n    selected: $selected\n    design_settings: $design_settings) {\n    id\n  }\n}\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"visualizaitons\"]);\n    },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\nexport const useDeleteVisualizationsGql = () => {\n  const mutation = gql`\n    mutation RemoveVisualization($id: ID!) {\n      removeVisualization(id: $id) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"visualizaitons\"]);\n    },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n"],"mappings":";;;;;;AAAA;AACA,SAASA,cAAT,QAA+B,aAA/B;AACA,SAASC,GAAT,QAAoB,iBAApB,C,CAGA;;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,SAA5C,C,CAEA;;AAEA,OAAO,MAAMC,yBAAyB,GAAG,MAAM;EAAA;;EAC7C,MAAMC,KAAK,GAAGJ,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GA7BE;EA+BA,OAAOC,WAAW,CAAC,CAAC,gBAAD,CAAD,EAAqBG,KAArB,EAA4B,EAA5B,CAAlB;AACD,CAjCM;;GAAMD,yB;UAgCJF,W;;;AAGT,OAAO,MAAMI,wBAAwB,GAAIC,EAAD,IAAQ;EAAA;;EAC5C,MAAMF,KAAK,GAAGJ,GAAI;AACtB;AACA,6BAA6BM,EAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA5BI;EA8BA,OAAOL,WAAW,CAAC,CAAC,gBAAD,EAAmBK,EAAnB,CAAD,EAAyBF,KAAzB,EAAgC,EAAhC,CAAlB;AACD,CAhCI;;IAAMC,wB;UA+BFJ,W;;;AAGX,OAAO,MAAMM,0BAA0B,GAAG,MAAM;EAAA;;EAC9C,MAAMC,QAAQ,GAAGR,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAxBE;EAyBA,MAAMS,WAAW,GAAGV,cAAc,EAAlC;EACA,MAAMW,OAAO,GAAG;IACdC,OAAO,EAAE,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,KAA6B;MACpC,IAAIA,QAAJ,EAAcA,QAAQ;IACvB,CAHa;IAIdC,SAAS,EAAE,MAAM;MACfN,WAAW,CAACO,iBAAZ,CAA8B,gBAA9B;IACD;EANa,CAAhB;EASA,OAAOd,cAAc,CAACM,QAAD,EAAWE,OAAX,CAArB;AACD,CArCM;;IAAMH,0B;UA0BSR,c,EAUbG,c;;;AAGT,OAAO,MAAMe,0BAA0B,GAAG,MAAM;EAAA;;EAC9C,MAAMT,QAAQ,GAAGR,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GA1BE;EA2BA,MAAMS,WAAW,GAAGV,cAAc,EAAlC;EACA,MAAMW,OAAO,GAAG;IACdC,OAAO,EAAE,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,KAA6B;MACpC,IAAIA,QAAJ,EAAcA,QAAQ;IACvB,CAHa;IAIdI,SAAS,EAAE,MAAM;MACfT,WAAW,CAACO,iBAAZ,CAA8B,CAAC,gBAAD,CAA9B;IACD;EANa,CAAhB;EASA,OAAOd,cAAc,CAACM,QAAD,EAAWE,OAAX,CAArB;AACD,CAvCM;;IAAMO,0B;UA4BSlB,c,EAUbG,c;;;AAGT,OAAO,MAAMiB,0BAA0B,GAAG,MAAM;EAAA;;EAC9C,MAAMX,QAAQ,GAAGR,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA,GANE;EAOA,MAAMS,WAAW,GAAGV,cAAc,EAAlC;EACA,MAAMW,OAAO,GAAG;IACdQ,SAAS,EAAE,MAAM;MACfT,WAAW,CAACO,iBAAZ,CAA8B,CAAC,gBAAD,CAA9B;IACD;EAHa,CAAhB;EAMA,OAAOd,cAAc,CAACM,QAAD,EAAWE,OAAX,CAArB;AACD,CAhBM;;IAAMS,0B;UAQSpB,c,EAObG,c"},"metadata":{},"sourceType":"module"}