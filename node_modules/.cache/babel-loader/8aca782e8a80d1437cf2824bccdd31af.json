{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { useQueryClient } from \"react-query\";\nimport { gql } from \"graphql-request\"; // Internal\n\nimport { useGqlQuery, useGqlMutation } from \"api/Api\"; // GRAPHQL API\n\nexport const useGetCurrentUser = () => {\n  _s();\n\n  const query = gql`\n    query {\n      me {\n        id\n        firstName\n        lastName\n        prefix\n        email\n        organizationId\n      }\n    }\n  `;\n  return useGqlQuery([\"users\"], query, {});\n};\n\n_s(useGetCurrentUser, \"OIuQPBGUklVORIy//JVFJUY4r0c=\", false, function () {\n  return [useGqlQuery];\n});\n\nexport const useFetchUsersGql = () => {\n  _s2();\n\n  const query = gql`\n    query {\n      allUsers {\n        id\n        firstname\n        lastname\n        email\n        position\n        company\n        Role {\n          id\n          name\n          description\n        }\n        last_sign_in_at\n        Organization {\n          id\n          Roles {\n            id\n            name\n            description\n          }\n        }\n      }\n    }\n  `;\n  return useGqlQuery([\"users\"], query, {});\n};\n\n_s2(useFetchUsersGql, \"OIuQPBGUklVORIy//JVFJUY4r0c=\", false, function () {\n  return [useGqlQuery];\n});\n\nexport const useFetchUserGql = (id, token) => {\n  _s3();\n\n  const query = gql`\n      query {\n        user: userById(id: \"${id}\", token:\"${token}\") {\n          id\n          firstname\n          lastname\n          organization_id\n          email\n          position\n          company\n          created_at\n          updated_at\n          last_sign_in_at\n        }\n      }`;\n  return useGqlQuery([\"users\", id], query, {});\n};\n\n_s3(useFetchUserGql, \"OIuQPBGUklVORIy//JVFJUY4r0c=\", false, function () {\n  return [useGqlQuery];\n});\n\nexport const useSearchUserGql = (id, string) => {\n  _s4();\n\n  const query = gql`\n    query {\n      allUsers(filter: {organization_id: \"${id}\" q: \"${string}\"}) {\n        id\n        firstname\n        lastname\n        organization_id\n        email\n        position\n        company\n        created_at\n        updated_at\n        last_sign_in_at\n      }\n    }`;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"users\");\n    }\n  };\n  return useGqlQuery([\"users\", id], query, options);\n};\n\n_s4(useSearchUserGql, \"IZLMNTFwMJ76KQ/MxOlEEoOyi3o=\", false, function () {\n  return [useQueryClient, useGqlQuery];\n});\n\nexport const useCreateUserGql = () => {\n  _s5();\n\n  const mutation = gql`\n    mutation CreateUser(\n      $role_id: ID!\n      $organization_id: ID!\n      $firstname: String!\n      $lastname: String!\n      $email: String!\n      $position: String!\n      $company: String!\n      $created_at: String!\n      $updated_at: String!\n      $last_sign_in_at: String!\n    ) {\n      createUser(\n        role_id: $role_id\n        organization_id: $organization_id\n        firstname: $firstname\n        lastname: $lastname\n        email: $email\n        position: $position\n        company: $company\n        created_at: $created_at\n        updated_at: $updated_at\n        last_sign_in_at: $last_sign_in_at\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"projects\");\n    }\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s5(useCreateUserGql, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});","map":{"version":3,"names":["useQueryClient","gql","useGqlQuery","useGqlMutation","useGetCurrentUser","query","useFetchUsersGql","useFetchUserGql","id","token","useSearchUserGql","string","queryClient","options","onError","err","_project","rollback","onSettled","invalidateQueries","useCreateUserGql","mutation"],"sources":["/Users/natehanson/Desktop/reactiondata-frontend/src/api/resources/organization/users.js"],"sourcesContent":["import { useQueryClient } from \"react-query\";\nimport { gql } from \"graphql-request\";\n\n// Internal\nimport { useGqlQuery, useGqlMutation } from \"api/Api\";\n\n// GRAPHQL API\n\nexport const useGetCurrentUser = () => {\n  const query = gql`\n    query {\n      me {\n        id\n        firstName\n        lastName\n        prefix\n        email\n        organizationId\n      }\n    }\n  `;\n\n  return useGqlQuery([\"users\"], query, {});\n};\n\nexport const useFetchUsersGql = () => {\n  const query = gql`\n    query {\n      allUsers {\n        id\n        firstname\n        lastname\n        email\n        position\n        company\n        Role {\n          id\n          name\n          description\n        }\n        last_sign_in_at\n        Organization {\n          id\n          Roles {\n            id\n            name\n            description\n          }\n        }\n      }\n    }\n  `;\n\n  return useGqlQuery([\"users\"], query, {});\n};\n\nexport const useFetchUserGql = (id, token) => {\n  const query = gql`\n      query {\n        user: userById(id: \"${id}\", token:\"${token}\") {\n          id\n          firstname\n          lastname\n          organization_id\n          email\n          position\n          company\n          created_at\n          updated_at\n          last_sign_in_at\n        }\n      }`;\n\n  return useGqlQuery([\"users\", id], query, {});\n};\n\nexport const useSearchUserGql = (id, string) => {\n  const query = gql`\n    query {\n      allUsers(filter: {organization_id: \"${id}\" q: \"${string}\"}) {\n        id\n        firstname\n        lastname\n        organization_id\n        email\n        position\n        company\n        created_at\n        updated_at\n        last_sign_in_at\n      }\n    }`;\n\n    const queryClient = useQueryClient();\n    const options = {\n      onError: (err, _project, rollback) => {\n        if (rollback) rollback();\n      },\n      onSettled: () => {\n        queryClient.invalidateQueries(\"users\");\n      },\n    };\n\n  return useGqlQuery([\"users\", id], query, options);\n};\n\nexport const useCreateUserGql = () => {\n  const mutation = gql`\n    mutation CreateUser(\n      $role_id: ID!\n      $organization_id: ID!\n      $firstname: String!\n      $lastname: String!\n      $email: String!\n      $position: String!\n      $company: String!\n      $created_at: String!\n      $updated_at: String!\n      $last_sign_in_at: String!\n    ) {\n      createUser(\n        role_id: $role_id\n        organization_id: $organization_id\n        firstname: $firstname\n        lastname: $lastname\n        email: $email\n        position: $position\n        company: $company\n        created_at: $created_at\n        updated_at: $updated_at\n        last_sign_in_at: $last_sign_in_at\n      ) {\n        id\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"projects\");\n    },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n"],"mappings":";;;;;;AAAA,SAASA,cAAT,QAA+B,aAA/B;AACA,SAASC,GAAT,QAAoB,iBAApB,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,SAA5C,C,CAEA;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;EAAA;;EACrC,MAAMC,KAAK,GAAGJ,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAXE;EAaA,OAAOC,WAAW,CAAC,CAAC,OAAD,CAAD,EAAYG,KAAZ,EAAmB,EAAnB,CAAlB;AACD,CAfM;;GAAMD,iB;UAcJF,W;;;AAGT,OAAO,MAAMI,gBAAgB,GAAG,MAAM;EAAA;;EACpC,MAAMD,KAAK,GAAGJ,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAzBE;EA2BA,OAAOC,WAAW,CAAC,CAAC,OAAD,CAAD,EAAYG,KAAZ,EAAmB,EAAnB,CAAlB;AACD,CA7BM;;IAAMC,gB;UA4BJJ,W;;;AAGT,OAAO,MAAMK,eAAe,GAAG,CAACC,EAAD,EAAKC,KAAL,KAAe;EAAA;;EAC5C,MAAMJ,KAAK,GAAGJ,GAAI;AACpB;AACA,8BAA8BO,EAAG,aAAYC,KAAM;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAdE;EAgBA,OAAOP,WAAW,CAAC,CAAC,OAAD,EAAUM,EAAV,CAAD,EAAgBH,KAAhB,EAAuB,EAAvB,CAAlB;AACD,CAlBM;;IAAME,e;UAiBJL,W;;;AAGT,OAAO,MAAMQ,gBAAgB,GAAG,CAACF,EAAD,EAAKG,MAAL,KAAgB;EAAA;;EAC9C,MAAMN,KAAK,GAAGJ,GAAI;AACpB;AACA,4CAA4CO,EAAG,SAAQG,MAAO;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAdE;EAgBE,MAAMC,WAAW,GAAGZ,cAAc,EAAlC;EACA,MAAMa,OAAO,GAAG;IACdC,OAAO,EAAE,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,KAA6B;MACpC,IAAIA,QAAJ,EAAcA,QAAQ;IACvB,CAHa;IAIdC,SAAS,EAAE,MAAM;MACfN,WAAW,CAACO,iBAAZ,CAA8B,OAA9B;IACD;EANa,CAAhB;EASF,OAAOjB,WAAW,CAAC,CAAC,OAAD,EAAUM,EAAV,CAAD,EAAgBH,KAAhB,EAAuBQ,OAAvB,CAAlB;AACD,CA5BM;;IAAMH,gB;UAiBWV,c,EAUfE,W;;;AAGT,OAAO,MAAMkB,gBAAgB,GAAG,MAAM;EAAA;;EACpC,MAAMC,QAAQ,GAAGpB,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GA5BE;EA6BA,MAAMW,WAAW,GAAGZ,cAAc,EAAlC;EACA,MAAMa,OAAO,GAAG;IACdC,OAAO,EAAE,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,KAA6B;MACpC,IAAIA,QAAJ,EAAcA,QAAQ;IACvB,CAHa;IAIdC,SAAS,EAAE,MAAM;MACfN,WAAW,CAACO,iBAAZ,CAA8B,UAA9B;IACD;EANa,CAAhB;EASA,OAAOhB,cAAc,CAACkB,QAAD,EAAWR,OAAX,CAArB;AACD,CAzCM;;IAAMO,gB;UA8BSpB,c,EAUbG,c"},"metadata":{},"sourceType":"module"}