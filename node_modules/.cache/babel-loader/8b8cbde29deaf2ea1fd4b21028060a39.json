{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\n// External\nimport { useQueryClient } from \"react-query\";\nimport { gql } from \"graphql-request\"; // Internal\n\nimport { useGqlQuery, useGqlMutation } from \"api/Api\"; // GRAPHQL API\n\nexport const useFetchEmailsGql = () => {\n  _s();\n\n  const query = gql`\n    query {\n      allEmails {\n        id\n        project_id\n        subject\n        audience_id\n        status\n        date\n        strength\n      }\n    }\n  `;\n  return useGqlQuery([\"emails\"], query, {});\n};\n\n_s(useFetchEmailsGql, \"OIuQPBGUklVORIy//JVFJUY4r0c=\", false, function () {\n  return [useGqlQuery];\n});\n\nexport const useFetchEmailGql = id => {\n  _s2();\n\n  const query = gql`\n    query {\n      survey: Project(id: \"${id}\") {\n        id\n        name\n      }\n    }\n  `;\n  return useGqlQuery([\"emails\", id], query, {});\n};\n\n_s2(useFetchEmailGql, \"OIuQPBGUklVORIy//JVFJUY4r0c=\", false, function () {\n  return [useGqlQuery];\n});\n\nexport const useCreateEmailGql = () => {\n  _s3();\n\n  const mutation = gql`\n  mutation CreateProject(\n    $organization_id: ID!\n    $name: String!\n    $description: String!\n    $created_at: String!\n    $updated_at: String!\n    $status: String!\n    $responses: Int!\n    $owner: String!\n    ) {\n    createProject(organization_id: $organization_id, name: $name, description: $description, created_at: $created_at, updated_at: $updated_at, status: $status, responses: $responses, owner: $owner) {\n      id\n    }\n  }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"emails\");\n    }\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s3(useCreateEmailGql, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});\n\nexport const useUpdateEmailGql = () => {\n  _s4();\n\n  const mutation = gql`\n    mutation UpdateSurvey(\n      $id: String!\n      $input: GenericScalar\n      $token: String!\n    ) {\n      updateSurvey(surveyId: $id, survey: $input, token: $token) {\n        ok\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"emails\"]);\n    }\n  };\n  return useGqlMutation(mutation, options);\n};\n\n_s4(useUpdateEmailGql, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});\n\nexport const useDeleteEmailGql = () => {\n  _s5();\n\n  const mutation = gql`\n  mutation RemoveProject($id: ID!) {\n    removeProject(id: $id) {\n      id\n    }\n  }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"emails\"]);\n    }\n  };\n  return useGqlMutation(mutation, options);\n}; // REST API\n// const uri = \"/projects\";\n// export const useFetchProjects = () => {\n//   return useQuery(\n//     \"projects\",\n//     () => apiClient.get(`${uri}`).then((res) => res.data),\n//     {}\n//   );\n// };\n// export const useFetchProject = (projectId) => {\n//   return useQuery(\n//     [\"projects\", projectId],\n//     () => apiClient.get(`${uri}/${projectId}`).then((res) => res.data),\n//     {}\n//   );\n// };\n// export const useCreateProject = () => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) => apiClient.post(`${uri}`, values).then((res) => res.data),\n//     {\n//       onMutate: (values) => {\n//         console.log(\"creating project\");\n//         console.log(values);\n//       },\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSettled: () => {\n//         queryClient.invalidateQueries(\"projects\");\n//       },\n//     }\n//   );\n// };\n// export const useUpdateProject = () => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) =>\n//       apiClient.patch(`${uri}/${values.id}`, values).then((res) => res.data),\n//     {\n//       onMutate: (values) => {\n//         // queryClient.setQueriesData([\"projects\", values.id], values);\n//         console.log(\"updating project\", values);\n//       },\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSuccess: () => {\n//         queryClient.invalidateQueries([\"projects\"]);\n//       },\n//     }\n//   );\n// };\n\n_s5(useDeleteEmailGql, \"E8Ci9NKFoLmKN2yRy8mQjRn7MqE=\", false, function () {\n  return [useQueryClient, useGqlMutation];\n});","map":{"version":3,"names":["useQueryClient","gql","useGqlQuery","useGqlMutation","useFetchEmailsGql","query","useFetchEmailGql","id","useCreateEmailGql","mutation","queryClient","options","onError","err","_project","rollback","onSettled","invalidateQueries","useUpdateEmailGql","onSuccess","useDeleteEmailGql"],"sources":["/Users/natehanson/Desktop/reactiondata-frontend/src/api/resources/projects/emails.js"],"sourcesContent":["// External\nimport { useQueryClient } from \"react-query\";\nimport { gql } from \"graphql-request\";\n\n// Internal\nimport { useGqlQuery, useGqlMutation } from \"api/Api\";\n\n// GRAPHQL API\n\nexport const useFetchEmailsGql = () => {\n  const query = gql`\n    query {\n      allEmails {\n        id\n        project_id\n        subject\n        audience_id\n        status\n        date\n        strength\n      }\n    }\n  `;\n\n  return useGqlQuery([\"emails\"], query, {});\n};\n\nexport const useFetchEmailGql = (id) => {\n  const query = gql`\n    query {\n      survey: Project(id: \"${id}\") {\n        id\n        name\n      }\n    }\n  `;\n\n  return useGqlQuery([\"emails\", id], query, {});\n};\n\nexport const useCreateEmailGql = () => {\n  const mutation = gql`\n  mutation CreateProject(\n    $organization_id: ID!\n    $name: String!\n    $description: String!\n    $created_at: String!\n    $updated_at: String!\n    $status: String!\n    $responses: Int!\n    $owner: String!\n    ) {\n    createProject(organization_id: $organization_id, name: $name, description: $description, created_at: $created_at, updated_at: $updated_at, status: $status, responses: $responses, owner: $owner) {\n      id\n    }\n  }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(\"emails\");\n    },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\nexport const useUpdateEmailGql = () => {\n  const mutation = gql`\n    mutation UpdateSurvey(\n      $id: String!\n      $input: GenericScalar\n      $token: String!\n    ) {\n      updateSurvey(surveyId: $id, survey: $input, token: $token) {\n        ok\n      }\n    }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onError: (err, _project, rollback) => {\n      if (rollback) rollback();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"emails\"]);\n    },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\nexport const useDeleteEmailGql = () => {\n  const mutation = gql`\n  mutation RemoveProject($id: ID!) {\n    removeProject(id: $id) {\n      id\n    }\n  }\n  `;\n  const queryClient = useQueryClient();\n  const options = {\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"emails\"]);\n    },\n  };\n\n  return useGqlMutation(mutation, options);\n};\n\n// REST API\n// const uri = \"/projects\";\n\n// export const useFetchProjects = () => {\n//   return useQuery(\n//     \"projects\",\n//     () => apiClient.get(`${uri}`).then((res) => res.data),\n//     {}\n//   );\n// };\n\n// export const useFetchProject = (projectId) => {\n//   return useQuery(\n//     [\"projects\", projectId],\n//     () => apiClient.get(`${uri}/${projectId}`).then((res) => res.data),\n//     {}\n//   );\n// };\n\n// export const useCreateProject = () => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) => apiClient.post(`${uri}`, values).then((res) => res.data),\n//     {\n//       onMutate: (values) => {\n//         console.log(\"creating project\");\n//         console.log(values);\n//       },\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSettled: () => {\n//         queryClient.invalidateQueries(\"projects\");\n//       },\n//     }\n//   );\n// };\n\n// export const useUpdateProject = () => {\n//   const queryClient = useQueryClient();\n//   return useMutation(\n//     (values) =>\n//       apiClient.patch(`${uri}/${values.id}`, values).then((res) => res.data),\n//     {\n//       onMutate: (values) => {\n//         // queryClient.setQueriesData([\"projects\", values.id], values);\n//         console.log(\"updating project\", values);\n//       },\n//       onError: (err, _project, rollback) => {\n//         console.log(err);\n//         if (rollback) rollback();\n//       },\n//       onSuccess: () => {\n//         queryClient.invalidateQueries([\"projects\"]);\n//       },\n//     }\n//   );\n// };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}