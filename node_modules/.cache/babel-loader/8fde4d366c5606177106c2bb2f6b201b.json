{"ast":null,"code":"var _jsxFileName = \"/Users/natehanson/Desktop/reactiondata-frontend/src/components/tables/EditableTable/Table.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from \"react\";\nimport clsx from \"clsx\";\nimport { useTable, useFlexLayout, useResizeColumns, useSortBy } from \"react-table\";\nimport Cell from \"./Cell\";\nimport Header from \"./Header\";\nimport PlusIcon from \"./img/Plus\";\nimport styles from \"./Table.module.scss\";\nimport { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst defaultColumn = {\n  minWidth: 50,\n  width: 150,\n  maxWidth: 400,\n  Cell: Cell,\n  Header: Header,\n  sortType: \"alphanumericFalsyLast\"\n};\nexport default function Table(_ref) {\n  _s();\n\n  let {\n    columns,\n    data,\n    dispatch: dataDispatch,\n    skipReset\n  } = _ref;\n  const sortTypes = useMemo(() => ({\n    alphanumericFalsyLast(rowA, rowB, columnId, desc) {\n      if (!rowA.values[columnId] && !rowB.values[columnId]) {\n        return 0;\n      }\n\n      if (!rowA.values[columnId]) {\n        return desc ? -1 : 1;\n      }\n\n      if (!rowB.values[columnId]) {\n        return desc ? 1 : -1;\n      }\n\n      return isNaN(rowA.values[columnId]) ? rowA.values[columnId].localeCompare(rowB.values[columnId]) : rowA.values[columnId] - rowB.values[columnId];\n    }\n\n  }), []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    dataDispatch,\n    autoResetSortBy: !skipReset,\n    autoResetFilters: !skipReset,\n    autoResetRowState: !skipReset,\n    sortTypes\n  }, useFlexLayout, useResizeColumns, useSortBy);\n\n  function isTableResizing() {\n    for (let headerGroup of headerGroups) {\n      for (let column of headerGroup.headers) {\n        if (column.isResizing) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", { ...getTableProps(),\n      className: clsx(styles.table, isTableResizing() && styles.noselect),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: headerGroups.map((headerGroup, i) => /*#__PURE__*/_createElement(\"div\", { ...headerGroup.getHeaderGroupProps(),\n          key: i,\n          className: styles.firstrow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }\n        }, headerGroup.headers.map(column => column.render(\"Header\"))))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", { ...getTableBodyProps(),\n        className: styles.tablebody,\n        children: [rows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_createElement(\"div\", { ...row.getRowProps(),\n            key: i,\n            className: styles.tr,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }\n          }, row.cells.map(cell => /*#__PURE__*/_createElement(\"div\", { ...cell.getCellProps(),\n            key: i,\n            className: styles.td,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 19\n            }\n          }, cell.render(\"Cell\"))));\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${styles.tr} ${styles.add_row}`,\n          onClick: () => dataDispatch({\n            type: \"add_row\"\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: `${styles.svg_icon} ${styles.svg_gray}`,\n            style: {\n              marginRight: 4\n            },\n            children: /*#__PURE__*/_jsxDEV(PlusIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), \"New\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Table, \"E5lpfUlexFy1Nu9uQBipVbXc5vg=\", false, function () {\n  return [useTable];\n});\n\n_c = Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useMemo","clsx","useTable","useFlexLayout","useResizeColumns","useSortBy","Cell","Header","PlusIcon","styles","defaultColumn","minWidth","width","maxWidth","sortType","Table","columns","data","dispatch","dataDispatch","skipReset","sortTypes","alphanumericFalsyLast","rowA","rowB","columnId","desc","values","isNaN","localeCompare","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","autoResetSortBy","autoResetFilters","autoResetRowState","isTableResizing","headerGroup","column","headers","isResizing","table","noselect","map","i","getHeaderGroupProps","firstrow","render","tablebody","row","getRowProps","tr","cells","cell","getCellProps","td","add_row","type","svg_icon","svg_gray","marginRight"],"sources":["/Users/natehanson/Desktop/reactiondata-frontend/src/components/tables/EditableTable/Table.jsx"],"sourcesContent":["import React, {useMemo} from \"react\";\nimport clsx from \"clsx\";\nimport {useTable, useFlexLayout, useResizeColumns, useSortBy} from \"react-table\";\nimport Cell from \"./Cell\";\nimport Header from \"./Header\";\nimport PlusIcon from \"./img/Plus\";\nimport styles from \"./Table.module.scss\"\n\nconst defaultColumn = {\n  minWidth: 50,\n  width: 150,\n  maxWidth: 400,\n  Cell: Cell,\n  Header: Header,\n  sortType: \"alphanumericFalsyLast\"\n};\n\nexport default function Table({columns, data, dispatch: dataDispatch, skipReset}) {\n  const sortTypes = useMemo(\n    () => ({\n      alphanumericFalsyLast(rowA, rowB, columnId, desc) {\n        if (!rowA.values[columnId] && !rowB.values[columnId]) {\n          return 0;\n        }\n\n        if (!rowA.values[columnId]) {\n          return desc ? -1 : 1;\n        }\n\n        if (!rowB.values[columnId]) {\n          return desc ? 1 : -1;\n        }\n\n        return isNaN(rowA.values[columnId])\n          ? rowA.values[columnId].localeCompare(rowB.values[columnId])\n          : rowA.values[columnId] - rowB.values[columnId];\n      }\n    }),\n    []\n  );\n\n  const {getTableProps, getTableBodyProps, headerGroups, rows, prepareRow} = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      dataDispatch,\n      autoResetSortBy: !skipReset,\n      autoResetFilters: !skipReset,\n      autoResetRowState: !skipReset,\n      sortTypes\n    },\n    useFlexLayout,\n    useResizeColumns,\n    useSortBy\n  );\n\n  function isTableResizing() {\n    for (let headerGroup of headerGroups) {\n      for (let column of headerGroup.headers) {\n        if (column.isResizing) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return (\n    <>\n      <div {...getTableProps()} className={clsx(styles.table, isTableResizing() && styles.noselect)}>\n        <div>\n          {headerGroups.map((headerGroup, i) => (\n            <div {...headerGroup.getHeaderGroupProps()}  key={i} className={styles.firstrow}>\n              {headerGroup.headers.map((column) => column.render(\"Header\"))}\n            </div>\n          ))}\n        </div>\n        <div {...getTableBodyProps()} className={styles.tablebody}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <div {...row.getRowProps()} key={i} className={styles.tr}>\n                {row.cells.map((cell) => (\n                  <div {...cell.getCellProps()} key={i} className={styles.td}>\n                    {cell.render(\"Cell\")}\n                  </div>\n                ))}\n              </div>\n            );\n          })}\n          <div className={`${styles.tr} ${styles.add_row}`} onClick={() => dataDispatch({type: \"add_row\"})}>\n            <span className={`${styles.svg_icon} ${styles.svg_gray}`} style={{marginRight: 4}}>\n              <PlusIcon />\n            </span>\n            New\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}