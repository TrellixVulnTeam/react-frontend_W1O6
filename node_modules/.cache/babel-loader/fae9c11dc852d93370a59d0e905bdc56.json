{"ast":null,"code":"var _jsxFileName = \"/Users/natehanson/Desktop/reactiondata-frontend/src/components/inputs/input_fields/CheckboxAnimated/Checkbox.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { animated, useSpring, config, useSpringRef, useChain } from \"react-spring\";\nimport styles from \"./Checkbox.module.scss\";\n/**\n * A checkbox component that is animated\n * @param {boolean} checked a boolean value that says whether the checkbox is checked or not\n * @param {function} onChange a function that will be called when the checkbox is checked or unchecked.\n * @returns {React.ReactElement} a personalized checkbox component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Checkbox(_ref) {\n  _s();\n\n  let {\n    checked,\n    onChange\n  } = _ref;\n  const checkboxAnimationRef = useSpringRef();\n  const checkboxAnimationStyle = useSpring({\n    backgroundColor: checked ? \"#2A627C\" : \"#fff\",\n    borderColor: checked ? \"#2A627C\" : \"#ddd\",\n    borderRadius: \"5px\",\n    config: config.gentle,\n    ref: checkboxAnimationRef,\n    cursor: \"pointer\"\n  });\n  const [checkmarkLength, setCheckmarkLength] = useState(null);\n  const checkmarkAnimationRef = useSpringRef();\n  const checkmarkAnimationStyle = useSpring({\n    x: checked ? 0 : checkmarkLength,\n    config: config.gentle,\n    ref: checkmarkAnimationRef\n  });\n  useChain(checked ? [checkboxAnimationRef, checkmarkAnimationRef] : [checkmarkAnimationRef, checkboxAnimationRef], [0, 0.1]);\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      onChange: onChange,\n      className: styles.check\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(animated.svg, {\n      style: checkboxAnimationStyle,\n      className: `${styles.checkbox} ${checked ? \"checkbox--active\" : \"\"}` // This element is purely decorative so\n      // we hide it for screen readers\n      ,\n      \"aria-hidden\": \"true\",\n      viewBox: \"0 0 15 11\",\n      fill: \"none\",\n      children: /*#__PURE__*/_jsxDEV(animated.path, {\n        d: \"M1 4.5L5 9L14 1\",\n        strokeWidth: \"2\",\n        stroke: \"#fff\",\n        ref: ref => {\n          if (ref) {\n            setCheckmarkLength(ref.getTotalLength());\n          }\n        },\n        strokeDasharray: checkmarkLength,\n        strokeDashoffset: checkmarkAnimationStyle.x\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Checkbox, \"/oqgUPNybpQ8v+uj8zhUvSwv9M0=\", false, function () {\n  return [useSpringRef, useSpring, useSpringRef, useSpring, useChain];\n});\n\n_c = Checkbox;\nexport default Checkbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkbox\");","map":{"version":3,"names":["React","useState","animated","useSpring","config","useSpringRef","useChain","styles","Checkbox","checked","onChange","checkboxAnimationRef","checkboxAnimationStyle","backgroundColor","borderColor","borderRadius","gentle","ref","cursor","checkmarkLength","setCheckmarkLength","checkmarkAnimationRef","checkmarkAnimationStyle","x","check","checkbox","getTotalLength"],"sources":["/Users/natehanson/Desktop/reactiondata-frontend/src/components/inputs/input_fields/CheckboxAnimated/Checkbox.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  animated,\n  useSpring,\n  config,\n  useSpringRef,\n  useChain,\n} from \"react-spring\";\nimport styles from \"./Checkbox.module.scss\";\n\n\n/**\n * A checkbox component that is animated\n * @param {boolean} checked a boolean value that says whether the checkbox is checked or not\n * @param {function} onChange a function that will be called when the checkbox is checked or unchecked.\n * @returns {React.ReactElement} a personalized checkbox component\n */\n\nfunction Checkbox({ checked, onChange }) {\n  const checkboxAnimationRef = useSpringRef();\n  const checkboxAnimationStyle = useSpring({\n    backgroundColor: checked ? \"#2A627C\" : \"#fff\",\n    borderColor: checked ? \"#2A627C\" : \"#ddd\",\n    borderRadius: \"5px\",\n    config: config.gentle,\n    ref: checkboxAnimationRef,\n    cursor: \"pointer\"\n  });\n\n  const [checkmarkLength, setCheckmarkLength] = useState(null);\n\n  const checkmarkAnimationRef = useSpringRef();\n  const checkmarkAnimationStyle = useSpring({\n    x: checked ? 0 : checkmarkLength,\n    config: config.gentle,\n    ref: checkmarkAnimationRef,\n  });\n\n  useChain(\n    checked\n      ? [checkboxAnimationRef, checkmarkAnimationRef]\n      : [checkmarkAnimationRef, checkboxAnimationRef],\n    [0, 0.1]\n  );\n\n  return (\n    <label>\n      <input\n        type=\"checkbox\"\n        onChange={onChange}\n        className={styles.check}\n      />\n      <animated.svg\n        style={checkboxAnimationStyle}\n        className={`${styles.checkbox} ${checked ? \"checkbox--active\" : \"\"}`}\n        // This element is purely decorative so\n        // we hide it for screen readers\n        aria-hidden=\"true\"\n        viewBox=\"0 0 15 11\"\n        fill=\"none\"\n      >\n        <animated.path\n          d=\"M1 4.5L5 9L14 1\"\n          strokeWidth=\"2\"\n          stroke=\"#fff\"\n          ref={(ref) => {\n            if (ref) {\n              setCheckmarkLength(ref.getTotalLength());\n            }\n          }}\n          strokeDasharray={checkmarkLength}\n          strokeDashoffset={checkmarkAnimationStyle.x}\n        />\n      </animated.svg>\n    </label>\n  );\n}\n\nexport default Checkbox;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,QADF,EAEEC,SAFF,EAGEC,MAHF,EAIEC,YAJF,EAKEC,QALF,QAMO,cANP;AAOA,OAAOC,MAAP,MAAmB,wBAAnB;AAGA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,SAASC,QAAT,OAAyC;EAAA;;EAAA,IAAvB;IAAEC,OAAF;IAAWC;EAAX,CAAuB;EACvC,MAAMC,oBAAoB,GAAGN,YAAY,EAAzC;EACA,MAAMO,sBAAsB,GAAGT,SAAS,CAAC;IACvCU,eAAe,EAAEJ,OAAO,GAAG,SAAH,GAAe,MADA;IAEvCK,WAAW,EAAEL,OAAO,GAAG,SAAH,GAAe,MAFI;IAGvCM,YAAY,EAAE,KAHyB;IAIvCX,MAAM,EAAEA,MAAM,CAACY,MAJwB;IAKvCC,GAAG,EAAEN,oBALkC;IAMvCO,MAAM,EAAE;EAN+B,CAAD,CAAxC;EASA,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCnB,QAAQ,CAAC,IAAD,CAAtD;EAEA,MAAMoB,qBAAqB,GAAGhB,YAAY,EAA1C;EACA,MAAMiB,uBAAuB,GAAGnB,SAAS,CAAC;IACxCoB,CAAC,EAAEd,OAAO,GAAG,CAAH,GAAOU,eADuB;IAExCf,MAAM,EAAEA,MAAM,CAACY,MAFyB;IAGxCC,GAAG,EAAEI;EAHmC,CAAD,CAAzC;EAMAf,QAAQ,CACNG,OAAO,GACH,CAACE,oBAAD,EAAuBU,qBAAvB,CADG,GAEH,CAACA,qBAAD,EAAwBV,oBAAxB,CAHE,EAIN,CAAC,CAAD,EAAI,GAAJ,CAJM,CAAR;EAOA,oBACE;IAAA,wBACE;MACE,IAAI,EAAC,UADP;MAEE,QAAQ,EAAED,QAFZ;MAGE,SAAS,EAAEH,MAAM,CAACiB;IAHpB;MAAA;MAAA;MAAA;IAAA,QADF,eAME,QAAC,QAAD,CAAU,GAAV;MACE,KAAK,EAAEZ,sBADT;MAEE,SAAS,EAAG,GAAEL,MAAM,CAACkB,QAAS,IAAGhB,OAAO,GAAG,kBAAH,GAAwB,EAAG,EAFrE,CAGE;MACA;MAJF;MAKE,eAAY,MALd;MAME,OAAO,EAAC,WANV;MAOE,IAAI,EAAC,MAPP;MAAA,uBASE,QAAC,QAAD,CAAU,IAAV;QACE,CAAC,EAAC,iBADJ;QAEE,WAAW,EAAC,GAFd;QAGE,MAAM,EAAC,MAHT;QAIE,GAAG,EAAGQ,GAAD,IAAS;UACZ,IAAIA,GAAJ,EAAS;YACPG,kBAAkB,CAACH,GAAG,CAACS,cAAJ,EAAD,CAAlB;UACD;QACF,CARH;QASE,eAAe,EAAEP,eATnB;QAUE,gBAAgB,EAAEG,uBAAuB,CAACC;MAV5C;QAAA;QAAA;QAAA;MAAA;IATF;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA+BD;;GA1DQf,Q;UACsBH,Y,EACEF,S,EAWDE,Y,EACEF,S,EAMhCG,Q;;;KApBOE,Q;AA4DT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}