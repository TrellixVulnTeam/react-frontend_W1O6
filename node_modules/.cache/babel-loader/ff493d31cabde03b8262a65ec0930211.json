{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClientError = void 0;\n\nvar ClientError =\n/** @class */\nfunction (_super) {\n  __extends(ClientError, _super);\n\n  function ClientError(response, request) {\n    var _this = this;\n\n    var message = ClientError.extractMessage(response) + \": \" + JSON.stringify({\n      response: response,\n      request: request\n    });\n    _this = _super.call(this, message) || this;\n    Object.setPrototypeOf(_this, ClientError.prototype);\n    _this.response = response;\n    _this.request = request; // this is needed as Safari doesn't support .captureStackTrace\n\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(_this, ClientError);\n    }\n\n    return _this;\n  }\n\n  ClientError.extractMessage = function (response) {\n    try {\n      return response.errors[0].message;\n    } catch (e) {\n      return \"GraphQL Error (Code: \" + response.status + \")\";\n    }\n  };\n\n  return ClientError;\n}(Error);\n\nexports.ClientError = ClientError;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AAAA;AAAA;EAAiCA;;EAI/B,qBAAYC,QAAZ,EAAuCC,OAAvC,EAAqE;IAArE;;IACE,IAAMC,OAAO,GAAMC,WAAW,CAACC,cAAZ,CAA2BJ,QAA3B,IAAoC,IAApC,GAAyCK,IAAI,CAACC,SAAL,CAAe;MACzEN,QAAQ,UADiE;MAEzEC,OAAO;IAFkE,CAAf,CAA5D;IAKAM,0BAAML,OAAN,KAAc,IAAd;IAEAM,MAAM,CAACC,cAAP,CAAsBF,KAAtB,EAA4BJ,WAAW,CAACO,SAAxC;IAEAH,KAAI,CAACP,QAAL,GAAgBA,QAAhB;IACAO,KAAI,CAACN,OAAL,GAAeA,OAAf,CAXmE,CAanE;;IACA,IAAI,OAAOU,KAAK,CAACC,iBAAb,KAAmC,UAAvC,EAAmD;MACjDD,KAAK,CAACC,iBAAN,CAAwBL,KAAxB,EAA8BJ,WAA9B;IACD;;;EACF;;EAEcA,6BAAf,UAA8BH,QAA9B,EAAuD;IACrD,IAAI;MACF,OAAOA,QAAQ,CAACa,MAAT,CAAiB,CAAjB,EAAoBX,OAA3B;IACD,CAFD,CAEE,OAAOY,CAAP,EAAU;MACV,OAAO,0BAAwBd,QAAQ,CAACe,MAAjC,GAAuC,GAA9C;IACD;EACF,CANc;;EAOjB;AAAC,CA9BD,CAAiCJ,KAAjC;;AAAaK","names":["__extends","response","request","message","ClientError","extractMessage","JSON","stringify","_this","Object","setPrototypeOf","prototype","Error","captureStackTrace","errors","e","status","exports"],"sources":["/Users/natehanson/Desktop/reactiondata-frontend/node_modules/graphql-request/src/types.ts"],"sourcesContent":["import { DocumentNode } from 'graphql/language/ast'\nimport * as Dom from './types.dom'\n\nexport type Variables = { [key: string]: any }\n\nexport interface GraphQLError {\n  message: string\n  locations?: { line: number; column: number }[]\n  path?: string[]\n  extensions?: any\n}\n\nexport interface GraphQLResponse<T = any> {\n  data?: T\n  errors?: GraphQLError[]\n  extensions?: any\n  status: number\n  [key: string]: any\n}\n\nexport interface GraphQLRequestContext<V = Variables> {\n  query: string | string[]\n  variables?: V\n}\n\nexport class ClientError extends Error {\n  response: GraphQLResponse\n  request: GraphQLRequestContext\n\n  constructor(response: GraphQLResponse, request: GraphQLRequestContext) {\n    const message = `${ClientError.extractMessage(response)}: ${JSON.stringify({\n      response,\n      request,\n    })}`\n\n    super(message)\n\n    Object.setPrototypeOf(this, ClientError.prototype)\n\n    this.response = response\n    this.request = request\n\n    // this is needed as Safari doesn't support .captureStackTrace\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, ClientError)\n    }\n  }\n\n  private static extractMessage(response: GraphQLResponse): string {\n    try {\n      return response.errors![0].message\n    } catch (e) {\n      return `GraphQL Error (Code: ${response.status})`\n    }\n  }\n}\n\nexport type MaybeFunction<T> = T | (() => T);\n\nexport type RequestDocument = string | DocumentNode\n\nexport type PatchedRequestInit = Omit<Dom.RequestInit, \"headers\">\n  & {headers?: MaybeFunction<Dom.RequestInit['headers']>};\n\nexport type BatchRequestDocument<V = Variables> = {\n  document: RequestDocument\n  variables?: V\n}\n\nexport type RawRequestOptions<V = Variables> = {\n  query: string\n  variables?: V\n  requestHeaders?: Dom.RequestInit['headers']\n  signal?: Dom.RequestInit['signal']\n}\n\nexport type RequestOptions<V = Variables> = {\n  document: RequestDocument\n  variables?: V\n  requestHeaders?: Dom.RequestInit['headers']\n  signal?: Dom.RequestInit['signal']\n}\n\nexport type BatchRequestsOptions<V = Variables> = {\n  documents: BatchRequestDocument<V>[]\n  requestHeaders?: Dom.RequestInit['headers']\n  signal?: Dom.RequestInit['signal']\n}\n\nexport type RequestExtendedOptions<V = Variables> = { url: string } & RequestOptions<V>\n\nexport type RawRequestExtendedOptions<V = Variables> = { url: string } & RawRequestOptions<V>\n\nexport type BatchRequestsExtendedOptions<V = Variables> = { url: string } & BatchRequestsOptions<V>\n"]},"metadata":{},"sourceType":"script"}